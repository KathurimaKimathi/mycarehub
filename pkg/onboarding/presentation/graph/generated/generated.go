// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"gitlab.slade360emr.com/go/base"
	"gitlab.slade360emr.com/go/profile/pkg/onboarding/application/resources"
	"gitlab.slade360emr.com/go/profile/pkg/onboarding/domain"
	"gitlab.slade360emr.com/go/profile/pkg/onboarding/domain/model"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Entity() EntityResolver
	Mutation() MutationResolver
	Query() QueryResolver
	VerifiedIdentifier() VerifiedIdentifierResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Beneficiary struct {
		DateOfBirth  func(childComplexity int) int
		Emails       func(childComplexity int) int
		Msisdns      func(childComplexity int) int
		Name         func(childComplexity int) int
		Relationship func(childComplexity int) int
	}

	BioData struct {
		DateOfBirth func(childComplexity int) int
		FirstName   func(childComplexity int) int
		Gender      func(childComplexity int) int
		LastName    func(childComplexity int) int
	}

	Branch struct {
		BranchSladeCode       func(childComplexity int) int
		ID                    func(childComplexity int) int
		Name                  func(childComplexity int) int
		OrganizationSladeCode func(childComplexity int) int
	}

	BranchConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BranchEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	BusinessPartner struct {
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Parent    func(childComplexity int) int
		SladeCode func(childComplexity int) int
	}

	BusinessPartnerConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	BusinessPartnerEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Cover struct {
		MemberName     func(childComplexity int) int
		MemberNumber   func(childComplexity int) int
		PayerName      func(childComplexity int) int
		PayerSladeCode func(childComplexity int) int
	}

	Customer struct {
		Active             func(childComplexity int) int
		CustomerID         func(childComplexity int) int
		ID                 func(childComplexity int) int
		ProfileID          func(childComplexity int) int
		ReceivablesAccount func(childComplexity int) int
	}

	Entity struct {
		FindPageInfoByHasNextPage func(childComplexity int, hasNextPage bool) int
		FindUserProfileByID       func(childComplexity int, id string) int
	}

	Identification struct {
		IdentificationDocNumber         func(childComplexity int) int
		IdentificationDocNumberUploadID func(childComplexity int) int
		IdentificationDocType           func(childComplexity int) int
	}

	IndividualCoach struct {
		IdentificationDoc           func(childComplexity int) int
		KRAPIN                      func(childComplexity int) int
		KRAPINUploadID              func(childComplexity int) int
		PracticeLicenseID           func(childComplexity int) int
		PracticeLicenseUploadID     func(childComplexity int) int
		SupportingDocumentsUploadID func(childComplexity int) int
	}

	IndividualNutrition struct {
		IdentificationDoc           func(childComplexity int) int
		KRAPIN                      func(childComplexity int) int
		KRAPINUploadID              func(childComplexity int) int
		PracticeLicenseID           func(childComplexity int) int
		PracticeLicenseUploadID     func(childComplexity int) int
		SupportingDocumentsUploadID func(childComplexity int) int
	}

	IndividualPharmaceutical struct {
		IdentificationDoc           func(childComplexity int) int
		KRAPIN                      func(childComplexity int) int
		KRAPINUploadID              func(childComplexity int) int
		PracticeLicenseID           func(childComplexity int) int
		PracticeLicenseUploadID     func(childComplexity int) int
		RegistrationNumber          func(childComplexity int) int
		SupportingDocumentsUploadID func(childComplexity int) int
	}

	IndividualPractitioner struct {
		Cadre                       func(childComplexity int) int
		IdentificationDoc           func(childComplexity int) int
		KRAPIN                      func(childComplexity int) int
		KRAPINUploadID              func(childComplexity int) int
		PracticeLicenseID           func(childComplexity int) int
		PracticeLicenseUploadID     func(childComplexity int) int
		PracticeServices            func(childComplexity int) int
		RegistrationNumber          func(childComplexity int) int
		SupportingDocumentsUploadID func(childComplexity int) int
	}

	IndividualRider struct {
		CertificateGoodConductUploadID func(childComplexity int) int
		DrivingLicenseID               func(childComplexity int) int
		DrivingLicenseUploadID         func(childComplexity int) int
		IdentificationDoc              func(childComplexity int) int
		KRAPIN                         func(childComplexity int) int
		KRAPINUploadID                 func(childComplexity int) int
		SupportingDocumentsUploadID    func(childComplexity int) int
	}

	KYCRequest struct {
		ID                  func(childComplexity int) int
		Proceseed           func(childComplexity int) int
		ReqOrganizationType func(childComplexity int) int
		ReqPartnerType      func(childComplexity int) int
		ReqRaw              func(childComplexity int) int
		Status              func(childComplexity int) int
		SupplierRecord      func(childComplexity int) int
	}

	Location struct {
		BranchSladeCode func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
	}

	Mutation struct {
		AddIndividualCoachKyc            func(childComplexity int, input domain.IndividualCoach) int
		AddIndividualNutritionKyc        func(childComplexity int, input domain.IndividualNutrition) int
		AddIndividualPharmaceuticalKyc   func(childComplexity int, input domain.IndividualPharmaceutical) int
		AddIndividualPractitionerKyc     func(childComplexity int, input domain.IndividualPractitioner) int
		AddIndividualRiderKyc            func(childComplexity int, input domain.IndividualRider) int
		AddOrganizationCoachKyc          func(childComplexity int, input domain.OrganizationCoach) int
		AddOrganizationNutritionKyc      func(childComplexity int, input domain.OrganizationNutrition) int
		AddOrganizationPharmaceuticalKyc func(childComplexity int, input domain.OrganizationPharmaceutical) int
		AddOrganizationPractitionerKyc   func(childComplexity int, input domain.OrganizationPractitioner) int
		AddOrganizationProviderKyc       func(childComplexity int, input domain.OrganizationProvider) int
		AddOrganizationRiderKyc          func(childComplexity int, input domain.OrganizationRider) int
		AddPartnerType                   func(childComplexity int, name string, partnerType domain.PartnerType) int
		ProcessKYCRequest                func(childComplexity int, id string, status domain.KYCProcessStatus, rejectionReason *string) int
		RecordPostVisitSurvey            func(childComplexity int, input resources.PostVisitSurveyInput) int
		RegisterPushToken                func(childComplexity int, token string) int
		SetUpSupplier                    func(childComplexity int, accountType domain.AccountType) int
		SupplierEDILogin                 func(childComplexity int, username string, password string, sladeCode string) int
		SupplierSetDefaultLocation       func(childComplexity int, locatonID string) int
		SuspendSupplier                  func(childComplexity int) int
		UpdateUserPin                    func(childComplexity int, phone string, pin string) int
		UpdateUserProfile                func(childComplexity int, input resources.UserProfileInput) int
	}

	OrganizationCoach struct {
		CertificateOfInCorporationUploadID func(childComplexity int) int
		CertificateOfIncorporation         func(childComplexity int) int
		DirectorIdentifications            func(childComplexity int) int
		KRAPIN                             func(childComplexity int) int
		KRAPINUploadID                     func(childComplexity int) int
		OrganizationCertificate            func(childComplexity int) int
		OrganizationTypeName               func(childComplexity int) int
		PracticeLicenseID                  func(childComplexity int) int
		PracticeLicenseUploadID            func(childComplexity int) int
		RegistrationNumber                 func(childComplexity int) int
		SupportingDocumentsUploadID        func(childComplexity int) int
	}

	OrganizationNutrition struct {
		CertificateOfInCorporationUploadID func(childComplexity int) int
		CertificateOfIncorporation         func(childComplexity int) int
		DirectorIdentifications            func(childComplexity int) int
		KRAPIN                             func(childComplexity int) int
		KRAPINUploadID                     func(childComplexity int) int
		OrganizationCertificate            func(childComplexity int) int
		OrganizationTypeName               func(childComplexity int) int
		PracticeLicenseID                  func(childComplexity int) int
		PracticeLicenseUploadID            func(childComplexity int) int
		RegistrationNumber                 func(childComplexity int) int
		SupportingDocumentsUploadID        func(childComplexity int) int
	}

	OrganizationPharmaceutical struct {
		CertificateOfInCorporationUploadID func(childComplexity int) int
		CertificateOfIncorporation         func(childComplexity int) int
		DirectorIdentifications            func(childComplexity int) int
		KRAPIN                             func(childComplexity int) int
		KRAPINUploadID                     func(childComplexity int) int
		OrganizationCertificate            func(childComplexity int) int
		OrganizationTypeName               func(childComplexity int) int
		PracticeLicenseID                  func(childComplexity int) int
		PracticeLicenseUploadID            func(childComplexity int) int
		RegistrationNumber                 func(childComplexity int) int
		SupportingDocumentsUploadID        func(childComplexity int) int
	}

	OrganizationPractitioner struct {
		Cadre                              func(childComplexity int) int
		CertificateOfInCorporationUploadID func(childComplexity int) int
		CertificateOfIncorporation         func(childComplexity int) int
		DirectorIdentifications            func(childComplexity int) int
		KRAPIN                             func(childComplexity int) int
		KRAPINUploadID                     func(childComplexity int) int
		OrganizationCertificate            func(childComplexity int) int
		OrganizationTypeName               func(childComplexity int) int
		PracticeLicenseUploadID            func(childComplexity int) int
		PracticeServices                   func(childComplexity int) int
		RegistrationNumber                 func(childComplexity int) int
		SupportingDocumentsUploadID        func(childComplexity int) int
	}

	OrganizationProvider struct {
		Cadre                              func(childComplexity int) int
		CertificateOfInCorporationUploadID func(childComplexity int) int
		CertificateOfIncorporation         func(childComplexity int) int
		DirectorIdentifications            func(childComplexity int) int
		KRAPIN                             func(childComplexity int) int
		KRAPINUploadID                     func(childComplexity int) int
		OrganizationCertificate            func(childComplexity int) int
		OrganizationTypeName               func(childComplexity int) int
		PracticeLicenseID                  func(childComplexity int) int
		PracticeLicenseUploadID            func(childComplexity int) int
		PracticeServices                   func(childComplexity int) int
		RegistrationNumber                 func(childComplexity int) int
		SupportingDocumentsUploadID        func(childComplexity int) int
	}

	OrganizationRider struct {
		CertificateOfInCorporationUploadID func(childComplexity int) int
		CertificateOfIncorporation         func(childComplexity int) int
		DirectorIdentifications            func(childComplexity int) int
		KRAPIN                             func(childComplexity int) int
		KRAPINUploadID                     func(childComplexity int) int
		OrganizationCertificate            func(childComplexity int) int
		OrganizationTypeName               func(childComplexity int) int
		SupportingDocumentsUploadID        func(childComplexity int) int
	}

	PINOutput struct {
		PINNumber func(childComplexity int) int
		ProfileID func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	PayablesAccount struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		IsActive    func(childComplexity int) int
		Name        func(childComplexity int) int
		Number      func(childComplexity int) int
		Tag         func(childComplexity int) int
	}

	Query struct {
		FetchKYCProcessingRequests    func(childComplexity int) int
		FetchSupplierAllowedLocations func(childComplexity int) int
		FindBranch                    func(childComplexity int, pagination *base.PaginationInput, filter []*resources.BranchFilterInput, sort []*resources.BranchSortInput) int
		FindProvider                  func(childComplexity int, pagination *base.PaginationInput, filter []*resources.BusinessPartnerFilterInput, sort []*resources.BusinessPartnerSortInput) int
		SupplierProfile               func(childComplexity int) int
		UserProfile                   func(childComplexity int) int
		__resolve__service            func(childComplexity int) int
		__resolve_entities            func(childComplexity int, representations []map[string]interface{}) int
	}

	ReceivablesAccount struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		IsActive    func(childComplexity int) int
		Name        func(childComplexity int) int
		Number      func(childComplexity int) int
		Tag         func(childComplexity int) int
	}

	ServicesOffered struct {
		OtherServices func(childComplexity int) int
		Services      func(childComplexity int) int
	}

	Supplier struct {
		AccountType            func(childComplexity int) int
		Active                 func(childComplexity int) int
		HasBranches            func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsOrganizationVerified func(childComplexity int) int
		KYCSubmitted           func(childComplexity int) int
		Location               func(childComplexity int) int
		ParentOrganizationID   func(childComplexity int) int
		PartnerSetupComplete   func(childComplexity int) int
		PartnerType            func(childComplexity int) int
		PayablesAccount        func(childComplexity int) int
		ProfileID              func(childComplexity int) int
		SladeCode              func(childComplexity int) int
		SupplierID             func(childComplexity int) int
		SupplierKYC            func(childComplexity int) int
		UnderOrganization      func(childComplexity int) int
	}

	UserProfile struct {
		Covers                  func(childComplexity int) int
		ID                      func(childComplexity int) int
		Permissions             func(childComplexity int) int
		PhotoUploadID           func(childComplexity int) int
		PrimaryEmailAddress     func(childComplexity int) int
		PrimaryPhone            func(childComplexity int) int
		PushTokens              func(childComplexity int) int
		SecondaryEmailAddresses func(childComplexity int) int
		SecondaryPhoneNumbers   func(childComplexity int) int
		Suspended               func(childComplexity int) int
		TermsAccepted           func(childComplexity int) int
		UserBioData             func(childComplexity int) int
		UserName                func(childComplexity int) int
		VerifiedIdentifiers     func(childComplexity int) int
	}

	VerifiedIdentifier struct {
		LoginProvider func(childComplexity int) int
		Timestamp     func(childComplexity int) int
		UID           func(childComplexity int) int
	}

	Service struct {
		SDL func(childComplexity int) int
	}
}

type EntityResolver interface {
	FindPageInfoByHasNextPage(ctx context.Context, hasNextPage bool) (*base.PageInfo, error)
	FindUserProfileByID(ctx context.Context, id string) (*base.UserProfile, error)
}
type MutationResolver interface {
	UpdateUserProfile(ctx context.Context, input resources.UserProfileInput) (*base.UserProfile, error)
	UpdateUserPin(ctx context.Context, phone string, pin string) (*resources.PINOutput, error)
	RegisterPushToken(ctx context.Context, token string) (bool, error)
	AddPartnerType(ctx context.Context, name string, partnerType domain.PartnerType) (bool, error)
	SuspendSupplier(ctx context.Context) (bool, error)
	SetUpSupplier(ctx context.Context, accountType domain.AccountType) (*domain.Supplier, error)
	SupplierEDILogin(ctx context.Context, username string, password string, sladeCode string) (*resources.BranchConnection, error)
	SupplierSetDefaultLocation(ctx context.Context, locatonID string) (bool, error)
	AddIndividualRiderKyc(ctx context.Context, input domain.IndividualRider) (*domain.IndividualRider, error)
	AddOrganizationRiderKyc(ctx context.Context, input domain.OrganizationRider) (*domain.OrganizationRider, error)
	AddIndividualPractitionerKyc(ctx context.Context, input domain.IndividualPractitioner) (*domain.IndividualPractitioner, error)
	AddOrganizationPractitionerKyc(ctx context.Context, input domain.OrganizationPractitioner) (*domain.OrganizationPractitioner, error)
	AddOrganizationProviderKyc(ctx context.Context, input domain.OrganizationProvider) (*domain.OrganizationProvider, error)
	AddIndividualPharmaceuticalKyc(ctx context.Context, input domain.IndividualPharmaceutical) (*domain.IndividualPharmaceutical, error)
	AddOrganizationPharmaceuticalKyc(ctx context.Context, input domain.OrganizationPharmaceutical) (*domain.OrganizationPharmaceutical, error)
	AddIndividualCoachKyc(ctx context.Context, input domain.IndividualCoach) (*domain.IndividualCoach, error)
	AddOrganizationCoachKyc(ctx context.Context, input domain.OrganizationCoach) (*domain.OrganizationCoach, error)
	AddIndividualNutritionKyc(ctx context.Context, input domain.IndividualNutrition) (*domain.IndividualNutrition, error)
	AddOrganizationNutritionKyc(ctx context.Context, input domain.OrganizationNutrition) (*domain.OrganizationNutrition, error)
	ProcessKYCRequest(ctx context.Context, id string, status domain.KYCProcessStatus, rejectionReason *string) (bool, error)
	RecordPostVisitSurvey(ctx context.Context, input resources.PostVisitSurveyInput) (bool, error)
}
type QueryResolver interface {
	UserProfile(ctx context.Context) (*base.UserProfile, error)
	SupplierProfile(ctx context.Context) (*domain.Supplier, error)
	FindProvider(ctx context.Context, pagination *base.PaginationInput, filter []*resources.BusinessPartnerFilterInput, sort []*resources.BusinessPartnerSortInput) (*resources.BusinessPartnerConnection, error)
	FindBranch(ctx context.Context, pagination *base.PaginationInput, filter []*resources.BranchFilterInput, sort []*resources.BranchSortInput) (*resources.BranchConnection, error)
	FetchSupplierAllowedLocations(ctx context.Context) (*resources.BranchConnection, error)
	FetchKYCProcessingRequests(ctx context.Context) ([]*domain.KYCRequest, error)
}
type VerifiedIdentifierResolver interface {
	Timestamp(ctx context.Context, obj *base.VerifiedIdentifier) (*base.Date, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Beneficiary.dateOfBirth":
		if e.complexity.Beneficiary.DateOfBirth == nil {
			break
		}

		return e.complexity.Beneficiary.DateOfBirth(childComplexity), true

	case "Beneficiary.emails":
		if e.complexity.Beneficiary.Emails == nil {
			break
		}

		return e.complexity.Beneficiary.Emails(childComplexity), true

	case "Beneficiary.msisdns":
		if e.complexity.Beneficiary.Msisdns == nil {
			break
		}

		return e.complexity.Beneficiary.Msisdns(childComplexity), true

	case "Beneficiary.name":
		if e.complexity.Beneficiary.Name == nil {
			break
		}

		return e.complexity.Beneficiary.Name(childComplexity), true

	case "Beneficiary.relationship":
		if e.complexity.Beneficiary.Relationship == nil {
			break
		}

		return e.complexity.Beneficiary.Relationship(childComplexity), true

	case "BioData.dateOfBirth":
		if e.complexity.BioData.DateOfBirth == nil {
			break
		}

		return e.complexity.BioData.DateOfBirth(childComplexity), true

	case "BioData.firstName":
		if e.complexity.BioData.FirstName == nil {
			break
		}

		return e.complexity.BioData.FirstName(childComplexity), true

	case "BioData.gender":
		if e.complexity.BioData.Gender == nil {
			break
		}

		return e.complexity.BioData.Gender(childComplexity), true

	case "BioData.lastName":
		if e.complexity.BioData.LastName == nil {
			break
		}

		return e.complexity.BioData.LastName(childComplexity), true

	case "Branch.branchSladeCode":
		if e.complexity.Branch.BranchSladeCode == nil {
			break
		}

		return e.complexity.Branch.BranchSladeCode(childComplexity), true

	case "Branch.id":
		if e.complexity.Branch.ID == nil {
			break
		}

		return e.complexity.Branch.ID(childComplexity), true

	case "Branch.name":
		if e.complexity.Branch.Name == nil {
			break
		}

		return e.complexity.Branch.Name(childComplexity), true

	case "Branch.organizationSladeCode":
		if e.complexity.Branch.OrganizationSladeCode == nil {
			break
		}

		return e.complexity.Branch.OrganizationSladeCode(childComplexity), true

	case "BranchConnection.edges":
		if e.complexity.BranchConnection.Edges == nil {
			break
		}

		return e.complexity.BranchConnection.Edges(childComplexity), true

	case "BranchConnection.pageInfo":
		if e.complexity.BranchConnection.PageInfo == nil {
			break
		}

		return e.complexity.BranchConnection.PageInfo(childComplexity), true

	case "BranchEdge.cursor":
		if e.complexity.BranchEdge.Cursor == nil {
			break
		}

		return e.complexity.BranchEdge.Cursor(childComplexity), true

	case "BranchEdge.node":
		if e.complexity.BranchEdge.Node == nil {
			break
		}

		return e.complexity.BranchEdge.Node(childComplexity), true

	case "BusinessPartner.id":
		if e.complexity.BusinessPartner.ID == nil {
			break
		}

		return e.complexity.BusinessPartner.ID(childComplexity), true

	case "BusinessPartner.name":
		if e.complexity.BusinessPartner.Name == nil {
			break
		}

		return e.complexity.BusinessPartner.Name(childComplexity), true

	case "BusinessPartner.parent":
		if e.complexity.BusinessPartner.Parent == nil {
			break
		}

		return e.complexity.BusinessPartner.Parent(childComplexity), true

	case "BusinessPartner.sladeCode":
		if e.complexity.BusinessPartner.SladeCode == nil {
			break
		}

		return e.complexity.BusinessPartner.SladeCode(childComplexity), true

	case "BusinessPartnerConnection.edges":
		if e.complexity.BusinessPartnerConnection.Edges == nil {
			break
		}

		return e.complexity.BusinessPartnerConnection.Edges(childComplexity), true

	case "BusinessPartnerConnection.pageInfo":
		if e.complexity.BusinessPartnerConnection.PageInfo == nil {
			break
		}

		return e.complexity.BusinessPartnerConnection.PageInfo(childComplexity), true

	case "BusinessPartnerEdge.cursor":
		if e.complexity.BusinessPartnerEdge.Cursor == nil {
			break
		}

		return e.complexity.BusinessPartnerEdge.Cursor(childComplexity), true

	case "BusinessPartnerEdge.node":
		if e.complexity.BusinessPartnerEdge.Node == nil {
			break
		}

		return e.complexity.BusinessPartnerEdge.Node(childComplexity), true

	case "Cover.memberName":
		if e.complexity.Cover.MemberName == nil {
			break
		}

		return e.complexity.Cover.MemberName(childComplexity), true

	case "Cover.memberNumber":
		if e.complexity.Cover.MemberNumber == nil {
			break
		}

		return e.complexity.Cover.MemberNumber(childComplexity), true

	case "Cover.payerName":
		if e.complexity.Cover.PayerName == nil {
			break
		}

		return e.complexity.Cover.PayerName(childComplexity), true

	case "Cover.payerSladeCode":
		if e.complexity.Cover.PayerSladeCode == nil {
			break
		}

		return e.complexity.Cover.PayerSladeCode(childComplexity), true

	case "Customer.active":
		if e.complexity.Customer.Active == nil {
			break
		}

		return e.complexity.Customer.Active(childComplexity), true

	case "Customer.customerID":
		if e.complexity.Customer.CustomerID == nil {
			break
		}

		return e.complexity.Customer.CustomerID(childComplexity), true

	case "Customer.id":
		if e.complexity.Customer.ID == nil {
			break
		}

		return e.complexity.Customer.ID(childComplexity), true

	case "Customer.profileID":
		if e.complexity.Customer.ProfileID == nil {
			break
		}

		return e.complexity.Customer.ProfileID(childComplexity), true

	case "Customer.receivablesAccount":
		if e.complexity.Customer.ReceivablesAccount == nil {
			break
		}

		return e.complexity.Customer.ReceivablesAccount(childComplexity), true

	case "Entity.findPageInfoByHasNextPage":
		if e.complexity.Entity.FindPageInfoByHasNextPage == nil {
			break
		}

		args, err := ec.field_Entity_findPageInfoByHasNextPage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindPageInfoByHasNextPage(childComplexity, args["hasNextPage"].(bool)), true

	case "Entity.findUserProfileByID":
		if e.complexity.Entity.FindUserProfileByID == nil {
			break
		}

		args, err := ec.field_Entity_findUserProfileByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindUserProfileByID(childComplexity, args["id"].(string)), true

	case "Identification.identificationDocNumber":
		if e.complexity.Identification.IdentificationDocNumber == nil {
			break
		}

		return e.complexity.Identification.IdentificationDocNumber(childComplexity), true

	case "Identification.identificationDocNumberUploadID":
		if e.complexity.Identification.IdentificationDocNumberUploadID == nil {
			break
		}

		return e.complexity.Identification.IdentificationDocNumberUploadID(childComplexity), true

	case "Identification.identificationDocType":
		if e.complexity.Identification.IdentificationDocType == nil {
			break
		}

		return e.complexity.Identification.IdentificationDocType(childComplexity), true

	case "IndividualCoach.identificationDoc":
		if e.complexity.IndividualCoach.IdentificationDoc == nil {
			break
		}

		return e.complexity.IndividualCoach.IdentificationDoc(childComplexity), true

	case "IndividualCoach.KRAPIN":
		if e.complexity.IndividualCoach.KRAPIN == nil {
			break
		}

		return e.complexity.IndividualCoach.KRAPIN(childComplexity), true

	case "IndividualCoach.KRAPINUploadID":
		if e.complexity.IndividualCoach.KRAPINUploadID == nil {
			break
		}

		return e.complexity.IndividualCoach.KRAPINUploadID(childComplexity), true

	case "IndividualCoach.practiceLicenseID":
		if e.complexity.IndividualCoach.PracticeLicenseID == nil {
			break
		}

		return e.complexity.IndividualCoach.PracticeLicenseID(childComplexity), true

	case "IndividualCoach.practiceLicenseUploadID":
		if e.complexity.IndividualCoach.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.IndividualCoach.PracticeLicenseUploadID(childComplexity), true

	case "IndividualCoach.supportingDocumentsUploadID":
		if e.complexity.IndividualCoach.SupportingDocumentsUploadID == nil {
			break
		}

		return e.complexity.IndividualCoach.SupportingDocumentsUploadID(childComplexity), true

	case "IndividualNutrition.identificationDoc":
		if e.complexity.IndividualNutrition.IdentificationDoc == nil {
			break
		}

		return e.complexity.IndividualNutrition.IdentificationDoc(childComplexity), true

	case "IndividualNutrition.KRAPIN":
		if e.complexity.IndividualNutrition.KRAPIN == nil {
			break
		}

		return e.complexity.IndividualNutrition.KRAPIN(childComplexity), true

	case "IndividualNutrition.KRAPINUploadID":
		if e.complexity.IndividualNutrition.KRAPINUploadID == nil {
			break
		}

		return e.complexity.IndividualNutrition.KRAPINUploadID(childComplexity), true

	case "IndividualNutrition.practiceLicenseID":
		if e.complexity.IndividualNutrition.PracticeLicenseID == nil {
			break
		}

		return e.complexity.IndividualNutrition.PracticeLicenseID(childComplexity), true

	case "IndividualNutrition.practiceLicenseUploadID":
		if e.complexity.IndividualNutrition.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.IndividualNutrition.PracticeLicenseUploadID(childComplexity), true

	case "IndividualNutrition.supportingDocumentsUploadID":
		if e.complexity.IndividualNutrition.SupportingDocumentsUploadID == nil {
			break
		}

		return e.complexity.IndividualNutrition.SupportingDocumentsUploadID(childComplexity), true

	case "IndividualPharmaceutical.identificationDoc":
		if e.complexity.IndividualPharmaceutical.IdentificationDoc == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.IdentificationDoc(childComplexity), true

	case "IndividualPharmaceutical.KRAPIN":
		if e.complexity.IndividualPharmaceutical.KRAPIN == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.KRAPIN(childComplexity), true

	case "IndividualPharmaceutical.KRAPINUploadID":
		if e.complexity.IndividualPharmaceutical.KRAPINUploadID == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.KRAPINUploadID(childComplexity), true

	case "IndividualPharmaceutical.practiceLicenseID":
		if e.complexity.IndividualPharmaceutical.PracticeLicenseID == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.PracticeLicenseID(childComplexity), true

	case "IndividualPharmaceutical.practiceLicenseUploadID":
		if e.complexity.IndividualPharmaceutical.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.PracticeLicenseUploadID(childComplexity), true

	case "IndividualPharmaceutical.registrationNumber":
		if e.complexity.IndividualPharmaceutical.RegistrationNumber == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.RegistrationNumber(childComplexity), true

	case "IndividualPharmaceutical.supportingDocumentsUploadID":
		if e.complexity.IndividualPharmaceutical.SupportingDocumentsUploadID == nil {
			break
		}

		return e.complexity.IndividualPharmaceutical.SupportingDocumentsUploadID(childComplexity), true

	case "IndividualPractitioner.cadre":
		if e.complexity.IndividualPractitioner.Cadre == nil {
			break
		}

		return e.complexity.IndividualPractitioner.Cadre(childComplexity), true

	case "IndividualPractitioner.identificationDoc":
		if e.complexity.IndividualPractitioner.IdentificationDoc == nil {
			break
		}

		return e.complexity.IndividualPractitioner.IdentificationDoc(childComplexity), true

	case "IndividualPractitioner.KRAPIN":
		if e.complexity.IndividualPractitioner.KRAPIN == nil {
			break
		}

		return e.complexity.IndividualPractitioner.KRAPIN(childComplexity), true

	case "IndividualPractitioner.KRAPINUploadID":
		if e.complexity.IndividualPractitioner.KRAPINUploadID == nil {
			break
		}

		return e.complexity.IndividualPractitioner.KRAPINUploadID(childComplexity), true

	case "IndividualPractitioner.practiceLicenseID":
		if e.complexity.IndividualPractitioner.PracticeLicenseID == nil {
			break
		}

		return e.complexity.IndividualPractitioner.PracticeLicenseID(childComplexity), true

	case "IndividualPractitioner.practiceLicenseUploadID":
		if e.complexity.IndividualPractitioner.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.IndividualPractitioner.PracticeLicenseUploadID(childComplexity), true

	case "IndividualPractitioner.practiceServices":
		if e.complexity.IndividualPractitioner.PracticeServices == nil {
			break
		}

		return e.complexity.IndividualPractitioner.PracticeServices(childComplexity), true

	case "IndividualPractitioner.registrationNumber":
		if e.complexity.IndividualPractitioner.RegistrationNumber == nil {
			break
		}

		return e.complexity.IndividualPractitioner.RegistrationNumber(childComplexity), true

	case "IndividualPractitioner.supportingDocumentsUploadID":
		if e.complexity.IndividualPractitioner.SupportingDocumentsUploadID == nil {
			break
		}

		return e.complexity.IndividualPractitioner.SupportingDocumentsUploadID(childComplexity), true

	case "IndividualRider.certificateGoodConductUploadID":
		if e.complexity.IndividualRider.CertificateGoodConductUploadID == nil {
			break
		}

		return e.complexity.IndividualRider.CertificateGoodConductUploadID(childComplexity), true

	case "IndividualRider.drivingLicenseID":
		if e.complexity.IndividualRider.DrivingLicenseID == nil {
			break
		}

		return e.complexity.IndividualRider.DrivingLicenseID(childComplexity), true

	case "IndividualRider.drivingLicenseUploadID":
		if e.complexity.IndividualRider.DrivingLicenseUploadID == nil {
			break
		}

		return e.complexity.IndividualRider.DrivingLicenseUploadID(childComplexity), true

	case "IndividualRider.identificationDoc":
		if e.complexity.IndividualRider.IdentificationDoc == nil {
			break
		}

		return e.complexity.IndividualRider.IdentificationDoc(childComplexity), true

	case "IndividualRider.KRAPIN":
		if e.complexity.IndividualRider.KRAPIN == nil {
			break
		}

		return e.complexity.IndividualRider.KRAPIN(childComplexity), true

	case "IndividualRider.KRAPINUploadID":
		if e.complexity.IndividualRider.KRAPINUploadID == nil {
			break
		}

		return e.complexity.IndividualRider.KRAPINUploadID(childComplexity), true

	case "IndividualRider.supportingDocumentsUploadID":
		if e.complexity.IndividualRider.SupportingDocumentsUploadID == nil {
			break
		}

		return e.complexity.IndividualRider.SupportingDocumentsUploadID(childComplexity), true

	case "KYCRequest.id":
		if e.complexity.KYCRequest.ID == nil {
			break
		}

		return e.complexity.KYCRequest.ID(childComplexity), true

	case "KYCRequest.proceseed":
		if e.complexity.KYCRequest.Proceseed == nil {
			break
		}

		return e.complexity.KYCRequest.Proceseed(childComplexity), true

	case "KYCRequest.reqOrganizationType":
		if e.complexity.KYCRequest.ReqOrganizationType == nil {
			break
		}

		return e.complexity.KYCRequest.ReqOrganizationType(childComplexity), true

	case "KYCRequest.reqPartnerType":
		if e.complexity.KYCRequest.ReqPartnerType == nil {
			break
		}

		return e.complexity.KYCRequest.ReqPartnerType(childComplexity), true

	case "KYCRequest.reqRaw":
		if e.complexity.KYCRequest.ReqRaw == nil {
			break
		}

		return e.complexity.KYCRequest.ReqRaw(childComplexity), true

	case "KYCRequest.status":
		if e.complexity.KYCRequest.Status == nil {
			break
		}

		return e.complexity.KYCRequest.Status(childComplexity), true

	case "KYCRequest.supplierRecord":
		if e.complexity.KYCRequest.SupplierRecord == nil {
			break
		}

		return e.complexity.KYCRequest.SupplierRecord(childComplexity), true

	case "Location.branchSladeCode":
		if e.complexity.Location.BranchSladeCode == nil {
			break
		}

		return e.complexity.Location.BranchSladeCode(childComplexity), true

	case "Location.id":
		if e.complexity.Location.ID == nil {
			break
		}

		return e.complexity.Location.ID(childComplexity), true

	case "Location.name":
		if e.complexity.Location.Name == nil {
			break
		}

		return e.complexity.Location.Name(childComplexity), true

	case "Mutation.addIndividualCoachKYC":
		if e.complexity.Mutation.AddIndividualCoachKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addIndividualCoachKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddIndividualCoachKyc(childComplexity, args["input"].(domain.IndividualCoach)), true

	case "Mutation.addIndividualNutritionKYC":
		if e.complexity.Mutation.AddIndividualNutritionKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addIndividualNutritionKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddIndividualNutritionKyc(childComplexity, args["input"].(domain.IndividualNutrition)), true

	case "Mutation.addIndividualPharmaceuticalKYC":
		if e.complexity.Mutation.AddIndividualPharmaceuticalKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addIndividualPharmaceuticalKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddIndividualPharmaceuticalKyc(childComplexity, args["input"].(domain.IndividualPharmaceutical)), true

	case "Mutation.addIndividualPractitionerKYC":
		if e.complexity.Mutation.AddIndividualPractitionerKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addIndividualPractitionerKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddIndividualPractitionerKyc(childComplexity, args["input"].(domain.IndividualPractitioner)), true

	case "Mutation.addIndividualRiderKYC":
		if e.complexity.Mutation.AddIndividualRiderKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addIndividualRiderKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddIndividualRiderKyc(childComplexity, args["input"].(domain.IndividualRider)), true

	case "Mutation.addOrganizationCoachKYC":
		if e.complexity.Mutation.AddOrganizationCoachKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganizationCoachKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganizationCoachKyc(childComplexity, args["input"].(domain.OrganizationCoach)), true

	case "Mutation.addOrganizationNutritionKYC":
		if e.complexity.Mutation.AddOrganizationNutritionKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganizationNutritionKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganizationNutritionKyc(childComplexity, args["input"].(domain.OrganizationNutrition)), true

	case "Mutation.addOrganizationPharmaceuticalKYC":
		if e.complexity.Mutation.AddOrganizationPharmaceuticalKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganizationPharmaceuticalKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganizationPharmaceuticalKyc(childComplexity, args["input"].(domain.OrganizationPharmaceutical)), true

	case "Mutation.addOrganizationPractitionerKYC":
		if e.complexity.Mutation.AddOrganizationPractitionerKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganizationPractitionerKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganizationPractitionerKyc(childComplexity, args["input"].(domain.OrganizationPractitioner)), true

	case "Mutation.addOrganizationProviderKYC":
		if e.complexity.Mutation.AddOrganizationProviderKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganizationProviderKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganizationProviderKyc(childComplexity, args["input"].(domain.OrganizationProvider)), true

	case "Mutation.addOrganizationRiderKYC":
		if e.complexity.Mutation.AddOrganizationRiderKyc == nil {
			break
		}

		args, err := ec.field_Mutation_addOrganizationRiderKYC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddOrganizationRiderKyc(childComplexity, args["input"].(domain.OrganizationRider)), true

	case "Mutation.addPartnerType":
		if e.complexity.Mutation.AddPartnerType == nil {
			break
		}

		args, err := ec.field_Mutation_addPartnerType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddPartnerType(childComplexity, args["name"].(string), args["partnerType"].(domain.PartnerType)), true

	case "Mutation.processKYCRequest":
		if e.complexity.Mutation.ProcessKYCRequest == nil {
			break
		}

		args, err := ec.field_Mutation_processKYCRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ProcessKYCRequest(childComplexity, args["id"].(string), args["status"].(domain.KYCProcessStatus), args["rejectionReason"].(*string)), true

	case "Mutation.recordPostVisitSurvey":
		if e.complexity.Mutation.RecordPostVisitSurvey == nil {
			break
		}

		args, err := ec.field_Mutation_recordPostVisitSurvey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordPostVisitSurvey(childComplexity, args["input"].(resources.PostVisitSurveyInput)), true

	case "Mutation.registerPushToken":
		if e.complexity.Mutation.RegisterPushToken == nil {
			break
		}

		args, err := ec.field_Mutation_registerPushToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterPushToken(childComplexity, args["token"].(string)), true

	case "Mutation.setUpSupplier":
		if e.complexity.Mutation.SetUpSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_setUpSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetUpSupplier(childComplexity, args["accountType"].(domain.AccountType)), true

	case "Mutation.supplierEDILogin":
		if e.complexity.Mutation.SupplierEDILogin == nil {
			break
		}

		args, err := ec.field_Mutation_supplierEDILogin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SupplierEDILogin(childComplexity, args["username"].(string), args["password"].(string), args["sladeCode"].(string)), true

	case "Mutation.supplierSetDefaultLocation":
		if e.complexity.Mutation.SupplierSetDefaultLocation == nil {
			break
		}

		args, err := ec.field_Mutation_supplierSetDefaultLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SupplierSetDefaultLocation(childComplexity, args["locatonID"].(string)), true

	case "Mutation.suspendSupplier":
		if e.complexity.Mutation.SuspendSupplier == nil {
			break
		}

		return e.complexity.Mutation.SuspendSupplier(childComplexity), true

	case "Mutation.updateUserPIN":
		if e.complexity.Mutation.UpdateUserPin == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserPIN_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserPin(childComplexity, args["phone"].(string), args["pin"].(string)), true

	case "Mutation.updateUserProfile":
		if e.complexity.Mutation.UpdateUserProfile == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserProfile(childComplexity, args["input"].(resources.UserProfileInput)), true

	case "OrganizationCoach.certificateOfInCorporationUploadID":
		if e.complexity.OrganizationCoach.CertificateOfInCorporationUploadID == nil {
			break
		}

		return e.complexity.OrganizationCoach.CertificateOfInCorporationUploadID(childComplexity), true

	case "OrganizationCoach.certificateOfIncorporation":
		if e.complexity.OrganizationCoach.CertificateOfIncorporation == nil {
			break
		}

		return e.complexity.OrganizationCoach.CertificateOfIncorporation(childComplexity), true

	case "OrganizationCoach.directorIdentifications":
		if e.complexity.OrganizationCoach.DirectorIdentifications == nil {
			break
		}

		return e.complexity.OrganizationCoach.DirectorIdentifications(childComplexity), true

	case "OrganizationCoach.KRAPIN":
		if e.complexity.OrganizationCoach.KRAPIN == nil {
			break
		}

		return e.complexity.OrganizationCoach.KRAPIN(childComplexity), true

	case "OrganizationCoach.KRAPINUploadID":
		if e.complexity.OrganizationCoach.KRAPINUploadID == nil {
			break
		}

		return e.complexity.OrganizationCoach.KRAPINUploadID(childComplexity), true

	case "OrganizationCoach.organizationCertificate":
		if e.complexity.OrganizationCoach.OrganizationCertificate == nil {
			break
		}

		return e.complexity.OrganizationCoach.OrganizationCertificate(childComplexity), true

	case "OrganizationCoach.organizationTypeName":
		if e.complexity.OrganizationCoach.OrganizationTypeName == nil {
			break
		}

		return e.complexity.OrganizationCoach.OrganizationTypeName(childComplexity), true

	case "OrganizationCoach.practiceLicenseID":
		if e.complexity.OrganizationCoach.PracticeLicenseID == nil {
			break
		}

		return e.complexity.OrganizationCoach.PracticeLicenseID(childComplexity), true

	case "OrganizationCoach.practiceLicenseUploadID":
		if e.complexity.OrganizationCoach.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.OrganizationCoach.PracticeLicenseUploadID(childComplexity), true

	case "OrganizationCoach.registrationNumber":
		if e.complexity.OrganizationCoach.RegistrationNumber == nil {
			break
		}

		return e.complexity.OrganizationCoach.RegistrationNumber(childComplexity), true

	case "OrganizationCoach.supportingDocumentsUploadID":
		if e.complexity.OrganizationCoach.SupportingDocumentsUploadID == nil {
			break
		}

		return e.complexity.OrganizationCoach.SupportingDocumentsUploadID(childComplexity), true

	case "OrganizationNutrition.certificateOfInCorporationUploadID":
		if e.complexity.OrganizationNutrition.CertificateOfInCorporationUploadID == nil {
			break
		}

		return e.complexity.OrganizationNutrition.CertificateOfInCorporationUploadID(childComplexity), true

	case "OrganizationNutrition.certificateOfIncorporation":
		if e.complexity.OrganizationNutrition.CertificateOfIncorporation == nil {
			break
		}

		return e.complexity.OrganizationNutrition.CertificateOfIncorporation(childComplexity), true

	case "OrganizationNutrition.directorIdentifications":
		if e.complexity.OrganizationNutrition.DirectorIdentifications == nil {
			break
		}

		return e.complexity.OrganizationNutrition.DirectorIdentifications(childComplexity), true

	case "OrganizationNutrition.KRAPIN":
		if e.complexity.OrganizationNutrition.KRAPIN == nil {
			break
		}

		return e.complexity.OrganizationNutrition.KRAPIN(childComplexity), true

	case "OrganizationNutrition.KRAPINUploadID":
		if e.complexity.OrganizationNutrition.KRAPINUploadID == nil {
			break
		}

		return e.complexity.OrganizationNutrition.KRAPINUploadID(childComplexity), true

	case "OrganizationNutrition.organizationCertificate":
		if e.complexity.OrganizationNutrition.OrganizationCertificate == nil {
			break
		}

		return e.complexity.OrganizationNutrition.OrganizationCertificate(childComplexity), true

	case "OrganizationNutrition.organizationTypeName":
		if e.complexity.OrganizationNutrition.OrganizationTypeName == nil {
			break
		}

		return e.complexity.OrganizationNutrition.OrganizationTypeName(childComplexity), true

	case "OrganizationNutrition.practiceLicenseID":
		if e.complexity.OrganizationNutrition.PracticeLicenseID == nil {
			break
		}

		return e.complexity.OrganizationNutrition.PracticeLicenseID(childComplexity), true

	case "OrganizationNutrition.practiceLicenseUploadID":
		if e.complexity.OrganizationNutrition.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.OrganizationNutrition.PracticeLicenseUploadID(childComplexity), true

	case "OrganizationNutrition.registrationNumber":
		if e.complexity.OrganizationNutrition.RegistrationNumber == nil {
			break
		}

		return e.complexity.OrganizationNutrition.RegistrationNumber(childComplexity), true

	case "OrganizationNutrition.supportingDocumentsUploadID":
		if e.complexity.OrganizationNutrition.SupportingDocumentsUploadID == nil {
			break
		}

		return e.complexity.OrganizationNutrition.SupportingDocumentsUploadID(childComplexity), true

	case "OrganizationPharmaceutical.certificateOfInCorporationUploadID":
		if e.complexity.OrganizationPharmaceutical.CertificateOfInCorporationUploadID == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.CertificateOfInCorporationUploadID(childComplexity), true

	case "OrganizationPharmaceutical.certificateOfIncorporation":
		if e.complexity.OrganizationPharmaceutical.CertificateOfIncorporation == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.CertificateOfIncorporation(childComplexity), true

	case "OrganizationPharmaceutical.directorIdentifications":
		if e.complexity.OrganizationPharmaceutical.DirectorIdentifications == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.DirectorIdentifications(childComplexity), true

	case "OrganizationPharmaceutical.KRAPIN":
		if e.complexity.OrganizationPharmaceutical.KRAPIN == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.KRAPIN(childComplexity), true

	case "OrganizationPharmaceutical.KRAPINUploadID":
		if e.complexity.OrganizationPharmaceutical.KRAPINUploadID == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.KRAPINUploadID(childComplexity), true

	case "OrganizationPharmaceutical.organizationCertificate":
		if e.complexity.OrganizationPharmaceutical.OrganizationCertificate == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.OrganizationCertificate(childComplexity), true

	case "OrganizationPharmaceutical.organizationTypeName":
		if e.complexity.OrganizationPharmaceutical.OrganizationTypeName == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.OrganizationTypeName(childComplexity), true

	case "OrganizationPharmaceutical.practiceLicenseID":
		if e.complexity.OrganizationPharmaceutical.PracticeLicenseID == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.PracticeLicenseID(childComplexity), true

	case "OrganizationPharmaceutical.practiceLicenseUploadID":
		if e.complexity.OrganizationPharmaceutical.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.PracticeLicenseUploadID(childComplexity), true

	case "OrganizationPharmaceutical.registrationNumber":
		if e.complexity.OrganizationPharmaceutical.RegistrationNumber == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.RegistrationNumber(childComplexity), true

	case "OrganizationPharmaceutical.supportingDocumentsUploadID":
		if e.complexity.OrganizationPharmaceutical.SupportingDocumentsUploadID == nil {
			break
		}

		return e.complexity.OrganizationPharmaceutical.SupportingDocumentsUploadID(childComplexity), true

	case "OrganizationPractitioner.cadre":
		if e.complexity.OrganizationPractitioner.Cadre == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.Cadre(childComplexity), true

	case "OrganizationPractitioner.certificateOfInCorporationUploadID":
		if e.complexity.OrganizationPractitioner.CertificateOfInCorporationUploadID == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.CertificateOfInCorporationUploadID(childComplexity), true

	case "OrganizationPractitioner.certificateOfIncorporation":
		if e.complexity.OrganizationPractitioner.CertificateOfIncorporation == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.CertificateOfIncorporation(childComplexity), true

	case "OrganizationPractitioner.directorIdentifications":
		if e.complexity.OrganizationPractitioner.DirectorIdentifications == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.DirectorIdentifications(childComplexity), true

	case "OrganizationPractitioner.KRAPIN":
		if e.complexity.OrganizationPractitioner.KRAPIN == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.KRAPIN(childComplexity), true

	case "OrganizationPractitioner.KRAPINUploadID":
		if e.complexity.OrganizationPractitioner.KRAPINUploadID == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.KRAPINUploadID(childComplexity), true

	case "OrganizationPractitioner.organizationCertificate":
		if e.complexity.OrganizationPractitioner.OrganizationCertificate == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.OrganizationCertificate(childComplexity), true

	case "OrganizationPractitioner.organizationTypeName":
		if e.complexity.OrganizationPractitioner.OrganizationTypeName == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.OrganizationTypeName(childComplexity), true

	case "OrganizationPractitioner.practiceLicenseUploadID":
		if e.complexity.OrganizationPractitioner.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.PracticeLicenseUploadID(childComplexity), true

	case "OrganizationPractitioner.practiceServices":
		if e.complexity.OrganizationPractitioner.PracticeServices == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.PracticeServices(childComplexity), true

	case "OrganizationPractitioner.registrationNumber":
		if e.complexity.OrganizationPractitioner.RegistrationNumber == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.RegistrationNumber(childComplexity), true

	case "OrganizationPractitioner.supportingDocumentsUploadID":
		if e.complexity.OrganizationPractitioner.SupportingDocumentsUploadID == nil {
			break
		}

		return e.complexity.OrganizationPractitioner.SupportingDocumentsUploadID(childComplexity), true

	case "OrganizationProvider.cadre":
		if e.complexity.OrganizationProvider.Cadre == nil {
			break
		}

		return e.complexity.OrganizationProvider.Cadre(childComplexity), true

	case "OrganizationProvider.certificateOfInCorporationUploadID":
		if e.complexity.OrganizationProvider.CertificateOfInCorporationUploadID == nil {
			break
		}

		return e.complexity.OrganizationProvider.CertificateOfInCorporationUploadID(childComplexity), true

	case "OrganizationProvider.certificateOfIncorporation":
		if e.complexity.OrganizationProvider.CertificateOfIncorporation == nil {
			break
		}

		return e.complexity.OrganizationProvider.CertificateOfIncorporation(childComplexity), true

	case "OrganizationProvider.directorIdentifications":
		if e.complexity.OrganizationProvider.DirectorIdentifications == nil {
			break
		}

		return e.complexity.OrganizationProvider.DirectorIdentifications(childComplexity), true

	case "OrganizationProvider.KRAPIN":
		if e.complexity.OrganizationProvider.KRAPIN == nil {
			break
		}

		return e.complexity.OrganizationProvider.KRAPIN(childComplexity), true

	case "OrganizationProvider.KRAPINUploadID":
		if e.complexity.OrganizationProvider.KRAPINUploadID == nil {
			break
		}

		return e.complexity.OrganizationProvider.KRAPINUploadID(childComplexity), true

	case "OrganizationProvider.organizationCertificate":
		if e.complexity.OrganizationProvider.OrganizationCertificate == nil {
			break
		}

		return e.complexity.OrganizationProvider.OrganizationCertificate(childComplexity), true

	case "OrganizationProvider.organizationTypeName":
		if e.complexity.OrganizationProvider.OrganizationTypeName == nil {
			break
		}

		return e.complexity.OrganizationProvider.OrganizationTypeName(childComplexity), true

	case "OrganizationProvider.practiceLicenseID":
		if e.complexity.OrganizationProvider.PracticeLicenseID == nil {
			break
		}

		return e.complexity.OrganizationProvider.PracticeLicenseID(childComplexity), true

	case "OrganizationProvider.practiceLicenseUploadID":
		if e.complexity.OrganizationProvider.PracticeLicenseUploadID == nil {
			break
		}

		return e.complexity.OrganizationProvider.PracticeLicenseUploadID(childComplexity), true

	case "OrganizationProvider.practiceServices":
		if e.complexity.OrganizationProvider.PracticeServices == nil {
			break
		}

		return e.complexity.OrganizationProvider.PracticeServices(childComplexity), true

	case "OrganizationProvider.registrationNumber":
		if e.complexity.OrganizationProvider.RegistrationNumber == nil {
			break
		}

		return e.complexity.OrganizationProvider.RegistrationNumber(childComplexity), true

	case "OrganizationProvider.supportingDocumentsUploadID":
		if e.complexity.OrganizationProvider.SupportingDocumentsUploadID == nil {
			break
		}

		return e.complexity.OrganizationProvider.SupportingDocumentsUploadID(childComplexity), true

	case "OrganizationRider.certificateOfInCorporationUploadID":
		if e.complexity.OrganizationRider.CertificateOfInCorporationUploadID == nil {
			break
		}

		return e.complexity.OrganizationRider.CertificateOfInCorporationUploadID(childComplexity), true

	case "OrganizationRider.certificateOfIncorporation":
		if e.complexity.OrganizationRider.CertificateOfIncorporation == nil {
			break
		}

		return e.complexity.OrganizationRider.CertificateOfIncorporation(childComplexity), true

	case "OrganizationRider.directorIdentifications":
		if e.complexity.OrganizationRider.DirectorIdentifications == nil {
			break
		}

		return e.complexity.OrganizationRider.DirectorIdentifications(childComplexity), true

	case "OrganizationRider.KRAPIN":
		if e.complexity.OrganizationRider.KRAPIN == nil {
			break
		}

		return e.complexity.OrganizationRider.KRAPIN(childComplexity), true

	case "OrganizationRider.KRAPINUploadID":
		if e.complexity.OrganizationRider.KRAPINUploadID == nil {
			break
		}

		return e.complexity.OrganizationRider.KRAPINUploadID(childComplexity), true

	case "OrganizationRider.organizationCertificate":
		if e.complexity.OrganizationRider.OrganizationCertificate == nil {
			break
		}

		return e.complexity.OrganizationRider.OrganizationCertificate(childComplexity), true

	case "OrganizationRider.organizationTypeName":
		if e.complexity.OrganizationRider.OrganizationTypeName == nil {
			break
		}

		return e.complexity.OrganizationRider.OrganizationTypeName(childComplexity), true

	case "OrganizationRider.supportingDocumentsUploadID":
		if e.complexity.OrganizationRider.SupportingDocumentsUploadID == nil {
			break
		}

		return e.complexity.OrganizationRider.SupportingDocumentsUploadID(childComplexity), true

	case "PINOutput.pinNumber":
		if e.complexity.PINOutput.PINNumber == nil {
			break
		}

		return e.complexity.PINOutput.PINNumber(childComplexity), true

	case "PINOutput.profileID":
		if e.complexity.PINOutput.ProfileID == nil {
			break
		}

		return e.complexity.PINOutput.ProfileID(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "PayablesAccount.description":
		if e.complexity.PayablesAccount.Description == nil {
			break
		}

		return e.complexity.PayablesAccount.Description(childComplexity), true

	case "PayablesAccount.id":
		if e.complexity.PayablesAccount.ID == nil {
			break
		}

		return e.complexity.PayablesAccount.ID(childComplexity), true

	case "PayablesAccount.isActive":
		if e.complexity.PayablesAccount.IsActive == nil {
			break
		}

		return e.complexity.PayablesAccount.IsActive(childComplexity), true

	case "PayablesAccount.name":
		if e.complexity.PayablesAccount.Name == nil {
			break
		}

		return e.complexity.PayablesAccount.Name(childComplexity), true

	case "PayablesAccount.number":
		if e.complexity.PayablesAccount.Number == nil {
			break
		}

		return e.complexity.PayablesAccount.Number(childComplexity), true

	case "PayablesAccount.tag":
		if e.complexity.PayablesAccount.Tag == nil {
			break
		}

		return e.complexity.PayablesAccount.Tag(childComplexity), true

	case "Query.fetchKYCProcessingRequests":
		if e.complexity.Query.FetchKYCProcessingRequests == nil {
			break
		}

		return e.complexity.Query.FetchKYCProcessingRequests(childComplexity), true

	case "Query.fetchSupplierAllowedLocations":
		if e.complexity.Query.FetchSupplierAllowedLocations == nil {
			break
		}

		return e.complexity.Query.FetchSupplierAllowedLocations(childComplexity), true

	case "Query.findBranch":
		if e.complexity.Query.FindBranch == nil {
			break
		}

		args, err := ec.field_Query_findBranch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindBranch(childComplexity, args["pagination"].(*base.PaginationInput), args["filter"].([]*resources.BranchFilterInput), args["sort"].([]*resources.BranchSortInput)), true

	case "Query.findProvider":
		if e.complexity.Query.FindProvider == nil {
			break
		}

		args, err := ec.field_Query_findProvider_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindProvider(childComplexity, args["pagination"].(*base.PaginationInput), args["filter"].([]*resources.BusinessPartnerFilterInput), args["sort"].([]*resources.BusinessPartnerSortInput)), true

	case "Query.supplierProfile":
		if e.complexity.Query.SupplierProfile == nil {
			break
		}

		return e.complexity.Query.SupplierProfile(childComplexity), true

	case "Query.userProfile":
		if e.complexity.Query.UserProfile == nil {
			break
		}

		return e.complexity.Query.UserProfile(childComplexity), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "Query._entities":
		if e.complexity.Query.__resolve_entities == nil {
			break
		}

		args, err := ec.field_Query__entities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.__resolve_entities(childComplexity, args["representations"].([]map[string]interface{})), true

	case "ReceivablesAccount.description":
		if e.complexity.ReceivablesAccount.Description == nil {
			break
		}

		return e.complexity.ReceivablesAccount.Description(childComplexity), true

	case "ReceivablesAccount.id":
		if e.complexity.ReceivablesAccount.ID == nil {
			break
		}

		return e.complexity.ReceivablesAccount.ID(childComplexity), true

	case "ReceivablesAccount.isActive":
		if e.complexity.ReceivablesAccount.IsActive == nil {
			break
		}

		return e.complexity.ReceivablesAccount.IsActive(childComplexity), true

	case "ReceivablesAccount.name":
		if e.complexity.ReceivablesAccount.Name == nil {
			break
		}

		return e.complexity.ReceivablesAccount.Name(childComplexity), true

	case "ReceivablesAccount.number":
		if e.complexity.ReceivablesAccount.Number == nil {
			break
		}

		return e.complexity.ReceivablesAccount.Number(childComplexity), true

	case "ReceivablesAccount.tag":
		if e.complexity.ReceivablesAccount.Tag == nil {
			break
		}

		return e.complexity.ReceivablesAccount.Tag(childComplexity), true

	case "ServicesOffered.otherServices":
		if e.complexity.ServicesOffered.OtherServices == nil {
			break
		}

		return e.complexity.ServicesOffered.OtherServices(childComplexity), true

	case "ServicesOffered.services":
		if e.complexity.ServicesOffered.Services == nil {
			break
		}

		return e.complexity.ServicesOffered.Services(childComplexity), true

	case "Supplier.accountType":
		if e.complexity.Supplier.AccountType == nil {
			break
		}

		return e.complexity.Supplier.AccountType(childComplexity), true

	case "Supplier.active":
		if e.complexity.Supplier.Active == nil {
			break
		}

		return e.complexity.Supplier.Active(childComplexity), true

	case "Supplier.hasBranches":
		if e.complexity.Supplier.HasBranches == nil {
			break
		}

		return e.complexity.Supplier.HasBranches(childComplexity), true

	case "Supplier.id":
		if e.complexity.Supplier.ID == nil {
			break
		}

		return e.complexity.Supplier.ID(childComplexity), true

	case "Supplier.isOrganizationVerified":
		if e.complexity.Supplier.IsOrganizationVerified == nil {
			break
		}

		return e.complexity.Supplier.IsOrganizationVerified(childComplexity), true

	case "Supplier.KYCSubmitted":
		if e.complexity.Supplier.KYCSubmitted == nil {
			break
		}

		return e.complexity.Supplier.KYCSubmitted(childComplexity), true

	case "Supplier.location":
		if e.complexity.Supplier.Location == nil {
			break
		}

		return e.complexity.Supplier.Location(childComplexity), true

	case "Supplier.parentOrganizationID":
		if e.complexity.Supplier.ParentOrganizationID == nil {
			break
		}

		return e.complexity.Supplier.ParentOrganizationID(childComplexity), true

	case "Supplier.partnerSetupComplete":
		if e.complexity.Supplier.PartnerSetupComplete == nil {
			break
		}

		return e.complexity.Supplier.PartnerSetupComplete(childComplexity), true

	case "Supplier.partnerType":
		if e.complexity.Supplier.PartnerType == nil {
			break
		}

		return e.complexity.Supplier.PartnerType(childComplexity), true

	case "Supplier.payablesAccount":
		if e.complexity.Supplier.PayablesAccount == nil {
			break
		}

		return e.complexity.Supplier.PayablesAccount(childComplexity), true

	case "Supplier.profileID":
		if e.complexity.Supplier.ProfileID == nil {
			break
		}

		return e.complexity.Supplier.ProfileID(childComplexity), true

	case "Supplier.sladeCode":
		if e.complexity.Supplier.SladeCode == nil {
			break
		}

		return e.complexity.Supplier.SladeCode(childComplexity), true

	case "Supplier.supplierId":
		if e.complexity.Supplier.SupplierID == nil {
			break
		}

		return e.complexity.Supplier.SupplierID(childComplexity), true

	case "Supplier.supplierKYC":
		if e.complexity.Supplier.SupplierKYC == nil {
			break
		}

		return e.complexity.Supplier.SupplierKYC(childComplexity), true

	case "Supplier.underOrganization":
		if e.complexity.Supplier.UnderOrganization == nil {
			break
		}

		return e.complexity.Supplier.UnderOrganization(childComplexity), true

	case "UserProfile.covers":
		if e.complexity.UserProfile.Covers == nil {
			break
		}

		return e.complexity.UserProfile.Covers(childComplexity), true

	case "UserProfile.id":
		if e.complexity.UserProfile.ID == nil {
			break
		}

		return e.complexity.UserProfile.ID(childComplexity), true

	case "UserProfile.permissions":
		if e.complexity.UserProfile.Permissions == nil {
			break
		}

		return e.complexity.UserProfile.Permissions(childComplexity), true

	case "UserProfile.photoUploadID":
		if e.complexity.UserProfile.PhotoUploadID == nil {
			break
		}

		return e.complexity.UserProfile.PhotoUploadID(childComplexity), true

	case "UserProfile.PrimaryEmailAddress":
		if e.complexity.UserProfile.PrimaryEmailAddress == nil {
			break
		}

		return e.complexity.UserProfile.PrimaryEmailAddress(childComplexity), true

	case "UserProfile.PrimaryPhone":
		if e.complexity.UserProfile.PrimaryPhone == nil {
			break
		}

		return e.complexity.UserProfile.PrimaryPhone(childComplexity), true

	case "UserProfile.pushTokens":
		if e.complexity.UserProfile.PushTokens == nil {
			break
		}

		return e.complexity.UserProfile.PushTokens(childComplexity), true

	case "UserProfile.SecondaryEmailAddresses":
		if e.complexity.UserProfile.SecondaryEmailAddresses == nil {
			break
		}

		return e.complexity.UserProfile.SecondaryEmailAddresses(childComplexity), true

	case "UserProfile.SecondaryPhoneNumbers":
		if e.complexity.UserProfile.SecondaryPhoneNumbers == nil {
			break
		}

		return e.complexity.UserProfile.SecondaryPhoneNumbers(childComplexity), true

	case "UserProfile.suspended":
		if e.complexity.UserProfile.Suspended == nil {
			break
		}

		return e.complexity.UserProfile.Suspended(childComplexity), true

	case "UserProfile.termsAccepted":
		if e.complexity.UserProfile.TermsAccepted == nil {
			break
		}

		return e.complexity.UserProfile.TermsAccepted(childComplexity), true

	case "UserProfile.userBioData":
		if e.complexity.UserProfile.UserBioData == nil {
			break
		}

		return e.complexity.UserProfile.UserBioData(childComplexity), true

	case "UserProfile.userName":
		if e.complexity.UserProfile.UserName == nil {
			break
		}

		return e.complexity.UserProfile.UserName(childComplexity), true

	case "UserProfile.verifiedIdentifiers":
		if e.complexity.UserProfile.VerifiedIdentifiers == nil {
			break
		}

		return e.complexity.UserProfile.VerifiedIdentifiers(childComplexity), true

	case "VerifiedIdentifier.loginProvider":
		if e.complexity.VerifiedIdentifier.LoginProvider == nil {
			break
		}

		return e.complexity.VerifiedIdentifier.LoginProvider(childComplexity), true

	case "VerifiedIdentifier.timestamp":
		if e.complexity.VerifiedIdentifier.Timestamp == nil {
			break
		}

		return e.complexity.VerifiedIdentifier.Timestamp(childComplexity), true

	case "VerifiedIdentifier.uid":
		if e.complexity.VerifiedIdentifier.UID == nil {
			break
		}

		return e.complexity.VerifiedIdentifier.UID(childComplexity), true

	case "_Service.sdl":
		if e.complexity.Service.SDL == nil {
			break
		}

		return e.complexity.Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "pkg/onboarding/presentation/graph/enums.graphql", Input: `enum PractitionerCadre {
  DOCTOR
  CLINICAL_OFFICER
  NURSE
}

enum FivePointRating {
  POOR
  UNSATISFACTORY
  AVERAGE
  SATISFACTORY
  EXCELLENT
}

enum Gender {
  male
  female
  other
  unknown
}

enum SignUpMethod {
  anonymous
  apple
  facebook
  google
  phone
}

enum PractitionerService {
  OUTPATIENT_SERVICES
  INPATIENT_SERVICES
  PHARMACY
  MATERNITY
  LAB_SERVICES
  OTHER
}

enum BeneficiaryRelationship {
  SPOUSE
  CHILD
}

enum AccountType {
  INDIVIDUAL
  ORGANISATION
}

enum IdentificationDocType {
  NATIONALID
  PASSPORT
  MILITARY
}

enum PartnerType {
  RIDER
  PRACTITIONER
  PROVIDER
  PHARMACEUTICAL
  COACH
  NUTRITION
  CONSUMER
}

enum OrganizationType {
  # main
  LIMITED_COMPANY

  # others
  TRUST
  UNIVERSITY
}

enum KYCProcessStatus {
  APPROVED
  REJECTED
  PENDING
}

enum Flavour {
  PRO
  CONSUMER
}

enum LoginProviderType {
  PHONE
  SOCIAL_GOOGLE
  SOCIAL_FACEBOOK
  SOCIAL_APPLE
}

enum PermissionType {
  SUPER_ADMIN
  ADMIN
  CREATE_ADMIN
  REMOVE_ADMIN
  ADD_SUPPLIER
  REMOVE_SUPPLIER
  SUSPEND_SUPPLIER
  UNSUSPEND_SUPPLIER
  PROCESS_KYC
}
`, BuiltIn: false},
	{Name: "pkg/onboarding/presentation/graph/external.graphql", Input: `
# supported content types
enum ContentType {
  PNG
  JPG
  PDF
}

enum Language {
  en
  sw
}

"""
PractitionerSpecialties is a list of recognised health worker specialties.

See: https://medicalboard.co.ke/resources_page/gazetted-specialties/
"""
enum PractitionerSpecialty {
  UNSPECIFIED
  ANAESTHESIA
  CARDIOTHORACIC_SURGERY
  CLINICAL_MEDICAL_GENETICS
  CLINCICAL_PATHOLOGY
  GENERAL_PATHOLOGY
  ANATOMIC_PATHOLOGY
  CLINICAL_ONCOLOGY
  DERMATOLOGY
  EAR_NOSE_AND_THROAT
  EMERGENCY_MEDICINE
  FAMILY_MEDICINE
  GENERAL_SURGERY
  GERIATRICS
  IMMUNOLOGY
  INFECTIOUS_DISEASE
  INTERNAL_MEDICINE
  MICROBIOLOGY
  NEUROSURGERY
  OBSTETRICS_AND_GYNAECOLOGY
  OCCUPATIONAL_MEDICINE
  OPHTHALMOLOGY
  ORTHOPAEDIC_SURGERY
  ONCOLOGY
  ONCOLOGY_RADIOTHERAPY
  PAEDIATRICS_AND_CHILD_HEALTH
  PALLIATIVE_MEDICINE
  PLASTIC_AND_RECONSTRUCTIVE_SURGERY
  PSYCHIATRY
  PUBLIC_HEALTH
  RADIOLOGY
  UROLOGY
}

type PageInfo @key(fields: "hasNextPage") @key(fields: "hasPreviousPage") {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input PaginationInput {
  first: Int
  last: Int
  after: String
  before: String
}

input FilterInput {
  search: String
  filterBy: [FilterParam]
}

input FilterParam {
  fieldName: String!
  fieldType: FieldType!
  comparisonOperation: Operation!
  fieldValue: Any!
}

enum SortOrder {
  ASC
  DESC
}

enum FieldType {
  BOOLEAN
  TIMESTAMP
  NUMBER
  INTEGER
  STRING
}

input SortInput {
  sortBy: [SortParam]
}

input SortParam {
  fieldName: String!
  sortOrder: SortOrder!
}

enum Operation {
  LESS_THAN
  LESS_THAN_OR_EQUAL_TO
  EQUAL
  GREATER_THAN
  GREATER_THAN_OR_EQUAL_TO
  IN
  CONTAINS
}
`, BuiltIn: false},
	{Name: "pkg/onboarding/presentation/graph/inputs.graphql", Input: `input UserProfileInput {
  photoUploadID: String

  # optional fields
  dateOfBirth: Date
  gender: Gender
  firstName: String
  lastName: String
}

input PostVisitSurveyInput {
  likelyToRecommend: Int!
  criticism: String!
  suggestions: String!
}

input BeneficiaryInput {
  name: String!
  msisdns: [String!]
  emails: [String!]
  relationship: BeneficiaryRelationship!
  dateOfBirth: Date!
}

input PractitionerServiceInput {
  services: [PractitionerService!]!
}

input OtherPractitionerServiceInput {
  otherServices: [String!]!
}

input BusinessPartnerFilterInput {
  search: String
  name: String
  sladeCode: String
}

input BusinessPartnerSortInput {
  name: SortOrder
  sladeCode: SortOrder
}

input BranchFilterInput {
  search: String
  sladeCode: String
  parentOrganizationID: String
}

input BranchSortInput {
  name: SortOrder
  sladeCode: SortOrder
}

input LocationInput {
  id: ID!
  name: String!
  branchSladeCode: String
}

input IdentificationInput {
  identificationDocType: IdentificationDocType!
  identificationDocNumber: String!
  identificationDocNumberUploadID: String!
}

input IndividualRiderInput {
  # common for individual account types
  identificationDoc: IdentificationInput!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # unique to riders
  drivingLicenseID: String!
  drivingLicenseUploadID: String
  certificateGoodConductUploadID: String!
}

input IndividualPractitionerInput {
  # common for individual account types
  identificationDoc: IdentificationInput!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
  practiceServices: [PractitionerService!]!
  cadre: PractitionerCadre!
}

input IndividualPharmaceuticalInput {
  # common for individual account types
  identificationDoc: IdentificationInput!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}
input IndividualCoachInput {
  # common for individual account types
  identificationDoc: IdentificationInput!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # unique for coach
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

input IndividualNutritionInput {
  # common for individual account types
  identificationDoc: IdentificationInput!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # unique for Nutrition
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

input OrganizationRiderInput {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [IdentificationInput]

  # common for organization : others
  organizationCertificate: String
}

input OrganizationPractitionerInput {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # common for organization : limited company
  certificateOfIncorporation: String!
  certificateOfInCorporationUploadID: String!
  directorIdentifications: [IdentificationInput]

  # common for organization : others
  organizationCertificate: String

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
  practiceServices: [PractitionerService!]!
  cadre: PractitionerCadre!
}

input OrganizationProviderInput {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [IdentificationInput]

  # common for organization : others
  organizationCertificate: String

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
  practiceServices: [PractitionerService!]!
  cadre: PractitionerCadre!
}

input OrganizationNutritionInput {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [IdentificationInput]

  # common for organization : others
  organizationCertificate: String

  # unique for nutrition
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

input OrganizationCoachInput {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [IdentificationInput]

  # common for organization : others
  organizationCertificate: String

  # unique for coach
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

input OrganizationPharmaceuticalInput {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [IdentificationInput]

  # common for organization : others
  organizationCertificate: String

  # unique for pharmaceutical
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}
`, BuiltIn: false},
	{Name: "pkg/onboarding/presentation/graph/profile.graphql", Input: `extend type Query {
  userProfile: UserProfile!

  supplierProfile: Supplier!

  findProvider(
    pagination: PaginationInput
    filter: [BusinessPartnerFilterInput]
    sort: [BusinessPartnerSortInput]
  ): BusinessPartnerConnection!

  findBranch(
    pagination: PaginationInput
    filter: [BranchFilterInput]
    sort: [BranchSortInput]
  ): BranchConnection!

  fetchSupplierAllowedLocations: BranchConnection!

  fetchKYCProcessingRequests: [KYCRequest!]

  # listTesters: [String!]!
}

extend type Mutation {
  updateUserProfile(input: UserProfileInput!): UserProfile!
  updateUserPIN(phone: String!, pin: String!): PINOutput!

  registerPushToken(token: String!): Boolean!

  addPartnerType(name: String!, partnerType: PartnerType!): Boolean!

  suspendSupplier: Boolean!

  setUpSupplier(accountType: AccountType!): Supplier
  supplierEDILogin(
    username: String!
    password: String!
    sladeCode: String!
  ): BranchConnection!

  supplierSetDefaultLocation(locatonID: String!): Boolean!

  addIndividualRiderKYC(input: IndividualRiderInput!): IndividualRider!

  addOrganizationRiderKYC(input: OrganizationRiderInput!): OrganizationRider!

  addIndividualPractitionerKYC(
    input: IndividualPractitionerInput!
  ): IndividualPractitioner!

  addOrganizationPractitionerKYC(
    input: OrganizationPractitionerInput!
  ): OrganizationPractitioner!

  addOrganizationProviderKYC(
    input: OrganizationProviderInput!
  ): OrganizationProvider!

  addIndividualPharmaceuticalKYC(
    input: IndividualPharmaceuticalInput!
  ): IndividualPharmaceutical!

  addOrganizationPharmaceuticalKYC(
    input: OrganizationPharmaceuticalInput!
  ): OrganizationPharmaceutical!

  addIndividualCoachKYC(input: IndividualCoachInput!): IndividualCoach!

  addOrganizationCoachKYC(input: OrganizationCoachInput!): OrganizationCoach!

  addIndividualNutritionKYC(
    input: IndividualNutritionInput!
  ): IndividualNutrition!

  addOrganizationNutritionKYC(
    input: OrganizationNutritionInput!
  ): OrganizationNutrition!

  processKYCRequest(
    id: String!
    status: KYCProcessStatus!
    rejectionReason: String
  ): Boolean!

  recordPostVisitSurvey(
    input: PostVisitSurveyInput!
  ): Boolean!

  # setUserPin(msisdn: String!, pin: String!): Boolean!

  # addTester(email: String!): Boolean!
  # removeTester(email: String!): Boolean!

}
`, BuiltIn: false},
	{Name: "pkg/onboarding/presentation/graph/types.graphql", Input: `scalar Date
scalar Markdown
scalar Any
scalar Decimal
scalar Map

type Cover {
  payerName: String!
  payerSladeCode: Int!
  memberNumber: String!
  memberName: String!
}

type VerifiedIdentifier {
  uid: String!
  timestamp: Date!
  loginProvider: LoginProviderType!
}

type BioData {
  firstName: String
  lastName: String
  dateOfBirth: Date
  gender: Gender
}

type UserProfile @key(fields: "id") {
  id: String!
  userName: String!
  verifiedIdentifiers: [VerifiedIdentifier]
  PrimaryPhone: String!
  PrimaryEmailAddress: String
  SecondaryPhoneNumbers: [String]
  SecondaryEmailAddresses: [String]
  pushTokens: [String!]
  permissions: [PermissionType!]
  termsAccepted: Boolean
  suspended: Boolean
  photoUploadID: String
  covers: [Cover]
  userBioData: BioData
}

type Customer {
  id: String!
  profileID: String
  customerID: String
  receivablesAccount: ReceivablesAccount
  active: Boolean
}

type ReceivablesAccount {
  id: String!
  name: String!
  isActive: Boolean!
  number: String!
  tag: String!
  description: String!
}

type ServicesOffered {
  services: [PractitionerService!]!
  otherServices: [String!]!
}

type PayablesAccount {
  id: String!
  name: String!
  isActive: Boolean!
  number: String!
  tag: String!
  description: String!
}

type Beneficiary {
  name: String!
  msisdns: [String!]
  emails: [String!]
  relationship: BeneficiaryRelationship!
  dateOfBirth: Date!
}

type Supplier {
  id: String!
  profileID: String!
  supplierId: String!
  payablesAccount: PayablesAccount!
  supplierKYC: Map!
  active: Boolean!

  accountType: AccountType!
  underOrganization: Boolean!
  isOrganizationVerified: Boolean!
  partnerType: PartnerType!

  partnerSetupComplete: Boolean!
  KYCSubmitted: Boolean!

  sladeCode: String
  parentOrganizationID: String
  hasBranches: Boolean
  location: Location
}

type Location {
  id: ID!
  name: String!
  branchSladeCode: String
}

type BusinessPartner {
  id: ID!
  name: String!
  sladeCode: String!
  parent: String
}

type BusinessPartnerEdge {
  cursor: String
  node: BusinessPartner
}

type BusinessPartnerConnection {
  edges: [BusinessPartnerEdge]
  pageInfo: PageInfo!
}

# A location is a "branch" of an organization.
type Branch {
  id: ID!
  name: String!
  organizationSladeCode: String!
  branchSladeCode: String!
}

type BranchEdge {
  cursor: String
  node: Branch
}

type BranchConnection {
  edges: [BranchEdge]
  pageInfo: PageInfo!
}

type Identification {
  identificationDocType: IdentificationDocType!
  identificationDocNumber: String!
  identificationDocNumberUploadID: String!
}

type IndividualRider {
  identificationDoc: Identification!

  KRAPIN: String!
  KRAPINUploadID: String!

  drivingLicenseID: String!
  drivingLicenseUploadID: String
  certificateGoodConductUploadID: String!
  supportingDocumentsUploadID: [String]
}

type IndividualPractitioner {
  # common for individual account types
  identificationDoc: Identification!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
  practiceServices: [PractitionerService!]!
  cadre: PractitionerCadre!
}

type IndividualPharmaceutical {
  # common for individual account types
  identificationDoc: Identification!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

type IndividualCoach {
  # common for individual account types
  identificationDoc: Identification!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # unique for coach
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

type IndividualNutrition {
  # common for individual account types
  identificationDoc: Identification!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # unique for Nutrition
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

type OrganizationRider {
  organizationTypeName: OrganizationType!

  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [Identification]

  organizationCertificate: String

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]
}

type OrganizationPractitioner {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [Identification]

  # common for organization : others
  organizationCertificate: String

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseUploadID: String!
  practiceServices: [PractitionerService!]!
  cadre: PractitionerCadre!
}

type OrganizationProvider {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [Identification]

  # common for organization : others
  organizationCertificate: String

  # unique to practitioner
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
  practiceServices: [PractitionerService!]!
  cadre: PractitionerCadre!
}

type OrganizationNutrition {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [Identification]

  # common for organization : others
  organizationCertificate: String

  # unique for nutrition
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

type OrganizationCoach {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [Identification]

  # common for organization : others
  organizationCertificate: String

  # unique for coach
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

type OrganizationPharmaceutical {
  # common for organization account types
  organizationTypeName: OrganizationType!

  # common for all
  KRAPIN: String!
  KRAPINUploadID: String!
  supportingDocumentsUploadID: [String]

  # common for organization : limited company
  certificateOfIncorporation: String
  certificateOfInCorporationUploadID: String
  directorIdentifications: [Identification]

  # common for organization : others
  organizationCertificate: String

  # unique for pharmaceutical
  registrationNumber: String!
  practiceLicenseID: String!
  practiceLicenseUploadID: String
}

type KYCRequest {
  id: String!
  reqPartnerType: PartnerType!
  reqOrganizationType: OrganizationType!
  reqRaw: Map!
  proceseed: Boolean!
  supplierRecord: Supplier!
  status: KYCProcessStatus
}


type PINOutput {
  profileID: String!
  pinNumber: String!
}
`, BuiltIn: false},
	{Name: "federation/directives.graphql", Input: `
scalar _Any
scalar _FieldSet

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) on OBJECT | INTERFACE
directive @extends on OBJECT
`, BuiltIn: true},
	{Name: "federation/entity.graphql", Input: `
# a union of all types that use the @key directive
union _Entity = PageInfo | UserProfile

# fake type to build resolver interfaces for users to implement
type Entity {
		findPageInfoByHasNextPage(hasNextPage: Boolean!,): PageInfo!
	findUserProfileByID(id: String!,): UserProfile!

}

type _Service {
  sdl: String
}

extend type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Entity_findPageInfoByHasNextPage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["hasNextPage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasNextPage"))
		arg0, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hasNextPage"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findUserProfileByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addIndividualCoachKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.IndividualCoach
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNIndividualCoachInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualCoach(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addIndividualNutritionKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.IndividualNutrition
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNIndividualNutritionInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualNutrition(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addIndividualPharmaceuticalKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.IndividualPharmaceutical
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNIndividualPharmaceuticalInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualPharmaceutical(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addIndividualPractitionerKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.IndividualPractitioner
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNIndividualPractitionerInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualPractitioner(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addIndividualRiderKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.IndividualRider
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNIndividualRiderInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualRider(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganizationCoachKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OrganizationCoach
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationCoachInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationCoach(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganizationNutritionKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OrganizationNutrition
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationNutritionInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationNutrition(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganizationPharmaceuticalKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OrganizationPharmaceutical
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationPharmaceuticalInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationPharmaceutical(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganizationPractitionerKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OrganizationPractitioner
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationPractitionerInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationPractitioner(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganizationProviderKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OrganizationProvider
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationProviderInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationProvider(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addOrganizationRiderKYC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OrganizationRider
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationRiderInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationRider(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addPartnerType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 domain.PartnerType
	if tmp, ok := rawArgs["partnerType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("partnerType"))
		arg1, err = ec.unmarshalNPartnerType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPartnerType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["partnerType"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_processKYCRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 domain.KYCProcessStatus
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg1, err = ec.unmarshalNKYCProcessStatus2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐKYCProcessStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["rejectionReason"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rejectionReason"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["rejectionReason"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_recordPostVisitSurvey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 resources.PostVisitSurveyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPostVisitSurveyInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐPostVisitSurveyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerPushToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setUpSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.AccountType
	if tmp, ok := rawArgs["accountType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountType"))
		arg0, err = ec.unmarshalNAccountType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐAccountType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["accountType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_supplierEDILogin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["username"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["username"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["sladeCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sladeCode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sladeCode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_supplierSetDefaultLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["locatonID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locatonID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locatonID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserPIN_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["phone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phone"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["pin"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pin"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pin"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 resources.UserProfileInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserProfileInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐUserProfileInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query__entities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []map[string]interface{}
	if tmp, ok := rawArgs["representations"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("representations"))
		arg0, err = ec.unmarshalN_Any2ᚕmapᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["representations"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findBranch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *base.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*resources.BranchFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOBranchFilterInput2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 []*resources.BranchSortInput
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOBranchSortInput2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchSortInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_findProvider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *base.PaginationInput
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPaginationInput2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPaginationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*resources.BusinessPartnerFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg1, err = ec.unmarshalOBusinessPartnerFilterInput2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg1
	var arg2 []*resources.BusinessPartnerSortInput
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOBusinessPartnerSortInput2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerSortInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Beneficiary_name(ctx context.Context, field graphql.CollectedField, obj *model.Beneficiary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Beneficiary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Beneficiary_msisdns(ctx context.Context, field graphql.CollectedField, obj *model.Beneficiary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Beneficiary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Msisdns, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Beneficiary_emails(ctx context.Context, field graphql.CollectedField, obj *model.Beneficiary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Beneficiary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Emails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Beneficiary_relationship(ctx context.Context, field graphql.CollectedField, obj *model.Beneficiary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Beneficiary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Relationship, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.BeneficiaryRelationship)
	fc.Result = res
	return ec.marshalNBeneficiaryRelationship2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐBeneficiaryRelationship(ctx, field.Selections, res)
}

func (ec *executionContext) _Beneficiary_dateOfBirth(ctx context.Context, field graphql.CollectedField, obj *model.Beneficiary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Beneficiary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateOfBirth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(base.Date)
	fc.Result = res
	return ec.marshalNDate2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _BioData_firstName(ctx context.Context, field graphql.CollectedField, obj *base.BioData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BioData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BioData_lastName(ctx context.Context, field graphql.CollectedField, obj *base.BioData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BioData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BioData_dateOfBirth(ctx context.Context, field graphql.CollectedField, obj *base.BioData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BioData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateOfBirth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*base.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _BioData_gender(ctx context.Context, field graphql.CollectedField, obj *base.BioData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BioData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(base.Gender)
	fc.Result = res
	return ec.marshalOGender2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_id(ctx context.Context, field graphql.CollectedField, obj *domain.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Branch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_name(ctx context.Context, field graphql.CollectedField, obj *domain.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Branch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_organizationSladeCode(ctx context.Context, field graphql.CollectedField, obj *domain.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Branch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationSladeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Branch_branchSladeCode(ctx context.Context, field graphql.CollectedField, obj *domain.Branch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Branch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BranchSladeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchConnection_edges(ctx context.Context, field graphql.CollectedField, obj *resources.BranchConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BranchConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*resources.BranchEdge)
	fc.Result = res
	return ec.marshalOBranchEdge2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *resources.BranchConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BranchConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*base.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *resources.BranchEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BranchEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BranchEdge_node(ctx context.Context, field graphql.CollectedField, obj *resources.BranchEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BranchEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Branch)
	fc.Result = res
	return ec.marshalOBranch2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐBranch(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartner_id(ctx context.Context, field graphql.CollectedField, obj *domain.BusinessPartner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartner_name(ctx context.Context, field graphql.CollectedField, obj *domain.BusinessPartner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartner_sladeCode(ctx context.Context, field graphql.CollectedField, obj *domain.BusinessPartner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SladeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartner_parent(ctx context.Context, field graphql.CollectedField, obj *domain.BusinessPartner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartnerConnection_edges(ctx context.Context, field graphql.CollectedField, obj *resources.BusinessPartnerConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartnerConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*resources.BusinessPartnerEdge)
	fc.Result = res
	return ec.marshalOBusinessPartnerEdge2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartnerConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *resources.BusinessPartnerConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartnerConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*base.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartnerEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *resources.BusinessPartnerEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartnerEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessPartnerEdge_node(ctx context.Context, field graphql.CollectedField, obj *resources.BusinessPartnerEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessPartnerEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.BusinessPartner)
	fc.Result = res
	return ec.marshalOBusinessPartner2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐBusinessPartner(ctx, field.Selections, res)
}

func (ec *executionContext) _Cover_payerName(ctx context.Context, field graphql.CollectedField, obj *base.Cover) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Cover",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cover_payerSladeCode(ctx context.Context, field graphql.CollectedField, obj *base.Cover) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Cover",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayerSladeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Cover_memberNumber(ctx context.Context, field graphql.CollectedField, obj *base.Cover) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Cover",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Cover_memberName(ctx context.Context, field graphql.CollectedField, obj *base.Cover) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Cover",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_id(ctx context.Context, field graphql.CollectedField, obj *domain.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_profileID(ctx context.Context, field graphql.CollectedField, obj *domain.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_customerID(ctx context.Context, field graphql.CollectedField, obj *domain.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_receivablesAccount(ctx context.Context, field graphql.CollectedField, obj *domain.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReceivablesAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.ReceivablesAccount)
	fc.Result = res
	return ec.marshalOReceivablesAccount2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐReceivablesAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Customer_active(ctx context.Context, field graphql.CollectedField, obj *domain.Customer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Customer",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findPageInfoByHasNextPage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findPageInfoByHasNextPage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindPageInfoByHasNextPage(rctx, args["hasNextPage"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*base.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findUserProfileByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findUserProfileByID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindUserProfileByID(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*base.UserProfile)
	fc.Result = res
	return ec.marshalNUserProfile2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐUserProfile(ctx, field.Selections, res)
}

func (ec *executionContext) _Identification_identificationDocType(ctx context.Context, field graphql.CollectedField, obj *domain.Identification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDocType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.IdentificationDocType)
	fc.Result = res
	return ec.marshalNIdentificationDocType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentificationDocType(ctx, field.Selections, res)
}

func (ec *executionContext) _Identification_identificationDocNumber(ctx context.Context, field graphql.CollectedField, obj *domain.Identification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDocNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Identification_identificationDocNumberUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.Identification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Identification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDocNumberUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_identificationDoc(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDoc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Identification)
	fc.Result = res
	return ec.marshalNIdentification2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_supportingDocumentsUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentsUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualCoach_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualNutrition_identificationDoc(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDoc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Identification)
	fc.Result = res
	return ec.marshalNIdentification2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualNutrition_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualNutrition_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualNutrition_supportingDocumentsUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentsUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualNutrition_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualNutrition_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_identificationDoc(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDoc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Identification)
	fc.Result = res
	return ec.marshalNIdentification2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_supportingDocumentsUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentsUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPharmaceutical_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_identificationDoc(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDoc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Identification)
	fc.Result = res
	return ec.marshalNIdentification2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_supportingDocumentsUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentsUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_practiceServices(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]domain.PractitionerService)
	fc.Result = res
	return ec.marshalNPractitionerService2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualPractitioner_cadre(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cadre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.PractitionerCadre)
	fc.Result = res
	return ec.marshalNPractitionerCadre2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_identificationDoc(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentificationDoc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Identification)
	fc.Result = res
	return ec.marshalNIdentification2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_drivingLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_drivingLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DrivingLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_certificateGoodConductUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateGoodConductUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _IndividualRider_supportingDocumentsUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.IndividualRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IndividualRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentsUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_id(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_reqPartnerType(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReqPartnerType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.PartnerType)
	fc.Result = res
	return ec.marshalNPartnerType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPartnerType(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_reqOrganizationType(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReqOrganizationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_reqRaw(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReqRaw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_proceseed(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Proceseed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_supplierRecord(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupplierRecord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _KYCRequest_status(ctx context.Context, field graphql.CollectedField, obj *domain.KYCRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "KYCRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.KYCProcessStatus)
	fc.Result = res
	return ec.marshalOKYCProcessStatus2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐKYCProcessStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_id(ctx context.Context, field graphql.CollectedField, obj *domain.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_name(ctx context.Context, field graphql.CollectedField, obj *domain.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Location_branchSladeCode(ctx context.Context, field graphql.CollectedField, obj *domain.Location) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BranchSladeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserProfile_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserProfile(rctx, args["input"].(resources.UserProfileInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*base.UserProfile)
	fc.Result = res
	return ec.marshalNUserProfile2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐUserProfile(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserPIN(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserPIN_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserPin(rctx, args["phone"].(string), args["pin"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*resources.PINOutput)
	fc.Result = res
	return ec.marshalNPINOutput2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐPINOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_registerPushToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_registerPushToken_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterPushToken(rctx, args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addPartnerType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addPartnerType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddPartnerType(rctx, args["name"].(string), args["partnerType"].(domain.PartnerType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_suspendSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SuspendSupplier(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setUpSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setUpSupplier_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetUpSupplier(rctx, args["accountType"].(domain.AccountType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Supplier)
	fc.Result = res
	return ec.marshalOSupplier2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_supplierEDILogin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_supplierEDILogin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SupplierEDILogin(rctx, args["username"].(string), args["password"].(string), args["sladeCode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*resources.BranchConnection)
	fc.Result = res
	return ec.marshalNBranchConnection2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_supplierSetDefaultLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_supplierSetDefaultLocation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SupplierSetDefaultLocation(rctx, args["locatonID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addIndividualRiderKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addIndividualRiderKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddIndividualRiderKyc(rctx, args["input"].(domain.IndividualRider))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.IndividualRider)
	fc.Result = res
	return ec.marshalNIndividualRider2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualRider(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addOrganizationRiderKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addOrganizationRiderKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganizationRiderKyc(rctx, args["input"].(domain.OrganizationRider))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.OrganizationRider)
	fc.Result = res
	return ec.marshalNOrganizationRider2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationRider(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addIndividualPractitionerKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addIndividualPractitionerKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddIndividualPractitionerKyc(rctx, args["input"].(domain.IndividualPractitioner))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.IndividualPractitioner)
	fc.Result = res
	return ec.marshalNIndividualPractitioner2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualPractitioner(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addOrganizationPractitionerKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addOrganizationPractitionerKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganizationPractitionerKyc(rctx, args["input"].(domain.OrganizationPractitioner))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.OrganizationPractitioner)
	fc.Result = res
	return ec.marshalNOrganizationPractitioner2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationPractitioner(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addOrganizationProviderKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addOrganizationProviderKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganizationProviderKyc(rctx, args["input"].(domain.OrganizationProvider))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.OrganizationProvider)
	fc.Result = res
	return ec.marshalNOrganizationProvider2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addIndividualPharmaceuticalKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addIndividualPharmaceuticalKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddIndividualPharmaceuticalKyc(rctx, args["input"].(domain.IndividualPharmaceutical))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.IndividualPharmaceutical)
	fc.Result = res
	return ec.marshalNIndividualPharmaceutical2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualPharmaceutical(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addOrganizationPharmaceuticalKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addOrganizationPharmaceuticalKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganizationPharmaceuticalKyc(rctx, args["input"].(domain.OrganizationPharmaceutical))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.OrganizationPharmaceutical)
	fc.Result = res
	return ec.marshalNOrganizationPharmaceutical2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationPharmaceutical(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addIndividualCoachKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addIndividualCoachKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddIndividualCoachKyc(rctx, args["input"].(domain.IndividualCoach))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.IndividualCoach)
	fc.Result = res
	return ec.marshalNIndividualCoach2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualCoach(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addOrganizationCoachKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addOrganizationCoachKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganizationCoachKyc(rctx, args["input"].(domain.OrganizationCoach))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.OrganizationCoach)
	fc.Result = res
	return ec.marshalNOrganizationCoach2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationCoach(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addIndividualNutritionKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addIndividualNutritionKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddIndividualNutritionKyc(rctx, args["input"].(domain.IndividualNutrition))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.IndividualNutrition)
	fc.Result = res
	return ec.marshalNIndividualNutrition2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualNutrition(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addOrganizationNutritionKYC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addOrganizationNutritionKYC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddOrganizationNutritionKyc(rctx, args["input"].(domain.OrganizationNutrition))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.OrganizationNutrition)
	fc.Result = res
	return ec.marshalNOrganizationNutrition2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationNutrition(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_processKYCRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_processKYCRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ProcessKYCRequest(rctx, args["id"].(string), args["status"].(domain.KYCProcessStatus), args["rejectionReason"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_recordPostVisitSurvey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_recordPostVisitSurvey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordPostVisitSurvey(rctx, args["input"].(resources.PostVisitSurveyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_organizationTypeName(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_supportingDocumentsUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentsUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_certificateOfIncorporation(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfIncorporation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_certificateOfInCorporationUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfInCorporationUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_directorIdentifications(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectorIdentifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Identification)
	fc.Result = res
	return ec.marshalOIdentification2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_organizationCertificate(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCertificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationCoach_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationCoach) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationCoach",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_organizationTypeName(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_supportingDocumentsUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentsUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_certificateOfIncorporation(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfIncorporation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_certificateOfInCorporationUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfInCorporationUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_directorIdentifications(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectorIdentifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Identification)
	fc.Result = res
	return ec.marshalOIdentification2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_organizationCertificate(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCertificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationNutrition_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationNutrition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationNutrition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_organizationTypeName(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_supportingDocumentsUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentsUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_certificateOfIncorporation(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfIncorporation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_certificateOfInCorporationUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfInCorporationUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_directorIdentifications(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectorIdentifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Identification)
	fc.Result = res
	return ec.marshalOIdentification2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_organizationCertificate(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCertificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPharmaceutical_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPharmaceutical) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPharmaceutical",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_organizationTypeName(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_supportingDocumentsUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentsUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_certificateOfIncorporation(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfIncorporation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_certificateOfInCorporationUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfInCorporationUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_directorIdentifications(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectorIdentifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Identification)
	fc.Result = res
	return ec.marshalOIdentification2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_organizationCertificate(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCertificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_practiceServices(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]domain.PractitionerService)
	fc.Result = res
	return ec.marshalNPractitionerService2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationPractitioner_cadre(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationPractitioner) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationPractitioner",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cadre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.PractitionerCadre)
	fc.Result = res
	return ec.marshalNPractitionerCadre2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_organizationTypeName(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_supportingDocumentsUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentsUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_certificateOfIncorporation(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfIncorporation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_certificateOfInCorporationUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfInCorporationUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_directorIdentifications(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectorIdentifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Identification)
	fc.Result = res
	return ec.marshalOIdentification2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_organizationCertificate(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCertificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_registrationNumber(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_practiceLicenseID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_practiceLicenseUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeLicenseUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_practiceServices(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticeServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]domain.PractitionerService)
	fc.Result = res
	return ec.marshalNPractitionerService2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationProvider_cadre(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cadre, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.PractitionerCadre)
	fc.Result = res
	return ec.marshalNPractitionerCadre2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_organizationTypeName(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.OrganizationType)
	fc.Result = res
	return ec.marshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_certificateOfIncorporation(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfIncorporation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_certificateOfInCorporationUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateOfInCorporationUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_directorIdentifications(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectorIdentifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Identification)
	fc.Result = res
	return ec.marshalOIdentification2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_organizationCertificate(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCertificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_KRAPIN(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPIN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_KRAPINUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KRAPINUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRider_supportingDocumentsUploadID(ctx context.Context, field graphql.CollectedField, obj *domain.OrganizationRider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingDocumentsUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PINOutput_profileID(ctx context.Context, field graphql.CollectedField, obj *resources.PINOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PINOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PINOutput_pinNumber(ctx context.Context, field graphql.CollectedField, obj *resources.PINOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PINOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PINNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *base.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *base.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *base.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *base.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PayablesAccount_id(ctx context.Context, field graphql.CollectedField, obj *domain.PayablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayablesAccount_name(ctx context.Context, field graphql.CollectedField, obj *domain.PayablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayablesAccount_isActive(ctx context.Context, field graphql.CollectedField, obj *domain.PayablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PayablesAccount_number(ctx context.Context, field graphql.CollectedField, obj *domain.PayablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayablesAccount_tag(ctx context.Context, field graphql.CollectedField, obj *domain.PayablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PayablesAccount_description(ctx context.Context, field graphql.CollectedField, obj *domain.PayablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PayablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserProfile(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*base.UserProfile)
	fc.Result = res
	return ec.marshalNUserProfile2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐUserProfile(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_supplierProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SupplierProfile(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findProvider(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findProvider_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindProvider(rctx, args["pagination"].(*base.PaginationInput), args["filter"].([]*resources.BusinessPartnerFilterInput), args["sort"].([]*resources.BusinessPartnerSortInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*resources.BusinessPartnerConnection)
	fc.Result = res
	return ec.marshalNBusinessPartnerConnection2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findBranch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findBranch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindBranch(rctx, args["pagination"].(*base.PaginationInput), args["filter"].([]*resources.BranchFilterInput), args["sort"].([]*resources.BranchSortInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*resources.BranchConnection)
	fc.Result = res
	return ec.marshalNBranchConnection2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fetchSupplierAllowedLocations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchSupplierAllowedLocations(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*resources.BranchConnection)
	fc.Result = res
	return ec.marshalNBranchConnection2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fetchKYCProcessingRequests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FetchKYCProcessingRequests(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.KYCRequest)
	fc.Result = res
	return ec.marshalOKYCRequest2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐKYCRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query__entities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query__entities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve_entities(ctx, args["representations"].([]map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]fedruntime.Entity)
	fc.Result = res
	return ec.marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _ReceivablesAccount_id(ctx context.Context, field graphql.CollectedField, obj *domain.ReceivablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReceivablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReceivablesAccount_name(ctx context.Context, field graphql.CollectedField, obj *domain.ReceivablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReceivablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReceivablesAccount_isActive(ctx context.Context, field graphql.CollectedField, obj *domain.ReceivablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReceivablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ReceivablesAccount_number(ctx context.Context, field graphql.CollectedField, obj *domain.ReceivablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReceivablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReceivablesAccount_tag(ctx context.Context, field graphql.CollectedField, obj *domain.ReceivablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReceivablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ReceivablesAccount_description(ctx context.Context, field graphql.CollectedField, obj *domain.ReceivablesAccount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReceivablesAccount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServicesOffered_services(ctx context.Context, field graphql.CollectedField, obj *model.ServicesOffered) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServicesOffered",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Services, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]domain.PractitionerService)
	fc.Result = res
	return ec.marshalNPractitionerService2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ServicesOffered_otherServices(ctx context.Context, field graphql.CollectedField, obj *model.ServicesOffered) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServicesOffered",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherServices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_id(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_profileID(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_supplierId(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupplierID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_payablesAccount(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayablesAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.PayablesAccount)
	fc.Result = res
	return ec.marshalNPayablesAccount2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPayablesAccount(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_supplierKYC(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupplierKYC, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_active(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_accountType(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.AccountType)
	fc.Result = res
	return ec.marshalNAccountType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐAccountType(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_underOrganization(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnderOrganization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_isOrganizationVerified(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOrganizationVerified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_partnerType(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartnerType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.PartnerType)
	fc.Result = res
	return ec.marshalNPartnerType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPartnerType(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_partnerSetupComplete(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartnerSetupComplete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_KYCSubmitted(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KYCSubmitted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_sladeCode(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SladeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_parentOrganizationID(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentOrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_hasBranches(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasBranches, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_location(ctx context.Context, field graphql.CollectedField, obj *domain.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Location)
	fc.Result = res
	return ec.marshalOLocation2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_id(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_userName(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_verifiedIdentifiers(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VerifiedIdentifiers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]base.VerifiedIdentifier)
	fc.Result = res
	return ec.marshalOVerifiedIdentifier2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐVerifiedIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_PrimaryPhone(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryPhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_PrimaryEmailAddress(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryEmailAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_SecondaryPhoneNumbers(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryPhoneNumbers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_SecondaryEmailAddresses(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecondaryEmailAddresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_pushTokens(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PushTokens, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_permissions(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]base.PermissionType)
	fc.Result = res
	return ec.marshalOPermissionType2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPermissionTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_termsAccepted(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TermsAccepted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_suspended(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suspended, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_photoUploadID(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhotoUploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_covers(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Covers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]base.Cover)
	fc.Result = res
	return ec.marshalOCover2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐCover(ctx, field.Selections, res)
}

func (ec *executionContext) _UserProfile_userBioData(ctx context.Context, field graphql.CollectedField, obj *base.UserProfile) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserProfile",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserBioData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(base.BioData)
	fc.Result = res
	return ec.marshalOBioData2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐBioData(ctx, field.Selections, res)
}

func (ec *executionContext) _VerifiedIdentifier_uid(ctx context.Context, field graphql.CollectedField, obj *base.VerifiedIdentifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VerifiedIdentifier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VerifiedIdentifier_timestamp(ctx context.Context, field graphql.CollectedField, obj *base.VerifiedIdentifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VerifiedIdentifier",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.VerifiedIdentifier().Timestamp(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*base.Date)
	fc.Result = res
	return ec.marshalNDate2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _VerifiedIdentifier_loginProvider(ctx context.Context, field graphql.CollectedField, obj *base.VerifiedIdentifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VerifiedIdentifier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoginProvider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(base.LoginProviderType)
	fc.Result = res
	return ec.marshalNLoginProviderType2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐLoginProviderType(ctx, field.Selections, res)
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBeneficiaryInput(ctx context.Context, obj interface{}) (model.BeneficiaryInput, error) {
	var it model.BeneficiaryInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "msisdns":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msisdns"))
			it.Msisdns, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "emails":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
			it.Emails, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "relationship":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("relationship"))
			it.Relationship, err = ec.unmarshalNBeneficiaryRelationship2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐBeneficiaryRelationship(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateOfBirth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfBirth"))
			it.DateOfBirth, err = ec.unmarshalNDate2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBranchFilterInput(ctx context.Context, obj interface{}) (resources.BranchFilterInput, error) {
	var it resources.BranchFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sladeCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sladeCode"))
			it.SladeCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentOrganizationID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentOrganizationID"))
			it.ParentOrganizationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBranchSortInput(ctx context.Context, obj interface{}) (resources.BranchSortInput, error) {
	var it resources.BranchSortInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOSortOrder2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		case "sladeCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sladeCode"))
			it.SladeCode, err = ec.unmarshalOSortOrder2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBusinessPartnerFilterInput(ctx context.Context, obj interface{}) (resources.BusinessPartnerFilterInput, error) {
	var it resources.BusinessPartnerFilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sladeCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sladeCode"))
			it.SladeCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBusinessPartnerSortInput(ctx context.Context, obj interface{}) (resources.BusinessPartnerSortInput, error) {
	var it resources.BusinessPartnerSortInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOSortOrder2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		case "sladeCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sladeCode"))
			it.SladeCode, err = ec.unmarshalOSortOrder2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFilterInput(ctx context.Context, obj interface{}) (base.FilterInput, error) {
	var it base.FilterInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "filterBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filterBy"))
			it.FilterBy, err = ec.unmarshalOFilterParam2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐFilterParam(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFilterParam(ctx context.Context, obj interface{}) (base.FilterParam, error) {
	var it base.FilterParam
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "fieldName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldName"))
			it.FieldName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fieldType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldType"))
			it.FieldType, err = ec.unmarshalNFieldType2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐFieldType(ctx, v)
			if err != nil {
				return it, err
			}
		case "comparisonOperation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comparisonOperation"))
			it.ComparisonOperation, err = ec.unmarshalNOperation2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐOperation(ctx, v)
			if err != nil {
				return it, err
			}
		case "fieldValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldValue"))
			it.FieldValue, err = ec.unmarshalNAny2interface(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIdentificationInput(ctx context.Context, obj interface{}) (domain.Identification, error) {
	var it domain.Identification
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identificationDocType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDocType"))
			it.IdentificationDocType, err = ec.unmarshalNIdentificationDocType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentificationDocType(ctx, v)
			if err != nil {
				return it, err
			}
		case "identificationDocNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDocNumber"))
			it.IdentificationDocNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "identificationDocNumberUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDocNumberUploadID"))
			it.IdentificationDocNumberUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIndividualCoachInput(ctx context.Context, obj interface{}) (domain.IndividualCoach, error) {
	var it domain.IndividualCoach
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identificationDoc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDoc"))
			it.IdentificationDoc, err = ec.unmarshalNIdentificationInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocumentsUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentsUploadID"))
			it.SupportingDocumentsUploadID, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIndividualNutritionInput(ctx context.Context, obj interface{}) (domain.IndividualNutrition, error) {
	var it domain.IndividualNutrition
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identificationDoc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDoc"))
			it.IdentificationDoc, err = ec.unmarshalNIdentificationInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocumentsUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentsUploadID"))
			it.SupportingDocumentsUploadID, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIndividualPharmaceuticalInput(ctx context.Context, obj interface{}) (domain.IndividualPharmaceutical, error) {
	var it domain.IndividualPharmaceutical
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identificationDoc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDoc"))
			it.IdentificationDoc, err = ec.unmarshalNIdentificationInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocumentsUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentsUploadID"))
			it.SupportingDocumentsUploadID, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIndividualPractitionerInput(ctx context.Context, obj interface{}) (domain.IndividualPractitioner, error) {
	var it domain.IndividualPractitioner
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identificationDoc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDoc"))
			it.IdentificationDoc, err = ec.unmarshalNIdentificationInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocumentsUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentsUploadID"))
			it.SupportingDocumentsUploadID, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceServices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceServices"))
			it.PracticeServices, err = ec.unmarshalNPractitionerService2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "cadre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cadre"))
			it.Cadre, err = ec.unmarshalNPractitionerCadre2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIndividualRiderInput(ctx context.Context, obj interface{}) (domain.IndividualRider, error) {
	var it domain.IndividualRider
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "identificationDoc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDoc"))
			it.IdentificationDoc, err = ec.unmarshalNIdentificationInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocumentsUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentsUploadID"))
			it.SupportingDocumentsUploadID, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "drivingLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drivingLicenseID"))
			it.DrivingLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "drivingLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("drivingLicenseUploadID"))
			it.DrivingLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateGoodConductUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateGoodConductUploadID"))
			it.CertificateGoodConductUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocationInput(ctx context.Context, obj interface{}) (model.LocationInput, error) {
	var it model.LocationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "branchSladeCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branchSladeCode"))
			it.BranchSladeCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationCoachInput(ctx context.Context, obj interface{}) (domain.OrganizationCoach, error) {
	var it domain.OrganizationCoach
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationTypeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationTypeName"))
			it.OrganizationTypeName, err = ec.unmarshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocumentsUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentsUploadID"))
			it.SupportingDocumentsUploadID, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfIncorporation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfIncorporation"))
			it.CertificateOfIncorporation, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfInCorporationUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfInCorporationUploadID"))
			it.CertificateOfInCorporationUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "directorIdentifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directorIdentifications"))
			it.DirectorIdentifications, err = ec.unmarshalOIdentificationInput2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationCertificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationCertificate"))
			it.OrganizationCertificate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationNutritionInput(ctx context.Context, obj interface{}) (domain.OrganizationNutrition, error) {
	var it domain.OrganizationNutrition
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationTypeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationTypeName"))
			it.OrganizationTypeName, err = ec.unmarshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocumentsUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentsUploadID"))
			it.SupportingDocumentsUploadID, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfIncorporation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfIncorporation"))
			it.CertificateOfIncorporation, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfInCorporationUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfInCorporationUploadID"))
			it.CertificateOfInCorporationUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "directorIdentifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directorIdentifications"))
			it.DirectorIdentifications, err = ec.unmarshalOIdentificationInput2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationCertificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationCertificate"))
			it.OrganizationCertificate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPharmaceuticalInput(ctx context.Context, obj interface{}) (domain.OrganizationPharmaceutical, error) {
	var it domain.OrganizationPharmaceutical
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationTypeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationTypeName"))
			it.OrganizationTypeName, err = ec.unmarshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocumentsUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentsUploadID"))
			it.SupportingDocumentsUploadID, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfIncorporation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfIncorporation"))
			it.CertificateOfIncorporation, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfInCorporationUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfInCorporationUploadID"))
			it.CertificateOfInCorporationUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "directorIdentifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directorIdentifications"))
			it.DirectorIdentifications, err = ec.unmarshalOIdentificationInput2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationCertificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationCertificate"))
			it.OrganizationCertificate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPractitionerInput(ctx context.Context, obj interface{}) (domain.OrganizationPractitioner, error) {
	var it domain.OrganizationPractitioner
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationTypeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationTypeName"))
			it.OrganizationTypeName, err = ec.unmarshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocumentsUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentsUploadID"))
			it.SupportingDocumentsUploadID, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfIncorporation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfIncorporation"))
			it.CertificateOfIncorporation, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfInCorporationUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfInCorporationUploadID"))
			it.CertificateOfInCorporationUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "directorIdentifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directorIdentifications"))
			it.DirectorIdentifications, err = ec.unmarshalOIdentificationInput2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationCertificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationCertificate"))
			it.OrganizationCertificate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceServices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceServices"))
			it.PracticeServices, err = ec.unmarshalNPractitionerService2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "cadre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cadre"))
			it.Cadre, err = ec.unmarshalNPractitionerCadre2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationProviderInput(ctx context.Context, obj interface{}) (domain.OrganizationProvider, error) {
	var it domain.OrganizationProvider
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationTypeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationTypeName"))
			it.OrganizationTypeName, err = ec.unmarshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocumentsUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentsUploadID"))
			it.SupportingDocumentsUploadID, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfIncorporation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfIncorporation"))
			it.CertificateOfIncorporation, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfInCorporationUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfInCorporationUploadID"))
			it.CertificateOfInCorporationUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "directorIdentifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directorIdentifications"))
			it.DirectorIdentifications, err = ec.unmarshalOIdentificationInput2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationCertificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationCertificate"))
			it.OrganizationCertificate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registrationNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationNumber"))
			it.RegistrationNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseID"))
			it.PracticeLicenseID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceLicenseUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceLicenseUploadID"))
			it.PracticeLicenseUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practiceServices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practiceServices"))
			it.PracticeServices, err = ec.unmarshalNPractitionerService2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "cadre":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cadre"))
			it.Cadre, err = ec.unmarshalNPractitionerCadre2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationRiderInput(ctx context.Context, obj interface{}) (domain.OrganizationRider, error) {
	var it domain.OrganizationRider
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationTypeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationTypeName"))
			it.OrganizationTypeName, err = ec.unmarshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPIN":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPIN"))
			it.KRAPIN, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "KRAPINUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("KRAPINUploadID"))
			it.KRAPINUploadID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supportingDocumentsUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supportingDocumentsUploadID"))
			it.SupportingDocumentsUploadID, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfIncorporation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfIncorporation"))
			it.CertificateOfIncorporation, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "certificateOfInCorporationUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificateOfInCorporationUploadID"))
			it.CertificateOfInCorporationUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "directorIdentifications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directorIdentifications"))
			it.DirectorIdentifications, err = ec.unmarshalOIdentificationInput2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationCertificate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationCertificate"))
			it.OrganizationCertificate, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOtherPractitionerServiceInput(ctx context.Context, obj interface{}) (model.OtherPractitionerServiceInput, error) {
	var it model.OtherPractitionerServiceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "otherServices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherServices"))
			it.OtherServices, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationInput(ctx context.Context, obj interface{}) (base.PaginationInput, error) {
	var it base.PaginationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "first":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
			it.First, err = ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "last":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
			it.Last, err = ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "after":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
			it.After, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "before":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
			it.Before, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostVisitSurveyInput(ctx context.Context, obj interface{}) (resources.PostVisitSurveyInput, error) {
	var it resources.PostVisitSurveyInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "likelyToRecommend":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("likelyToRecommend"))
			it.LikelyToRecommend, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "criticism":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("criticism"))
			it.Criticism, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "suggestions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("suggestions"))
			it.Suggestions, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPractitionerServiceInput(ctx context.Context, obj interface{}) (model.PractitionerServiceInput, error) {
	var it model.PractitionerServiceInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "services":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("services"))
			it.Services, err = ec.unmarshalNPractitionerService2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSortInput(ctx context.Context, obj interface{}) (base.SortInput, error) {
	var it base.SortInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOSortParam2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐSortParam(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSortParam(ctx context.Context, obj interface{}) (base.SortParam, error) {
	var it base.SortParam
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "fieldName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldName"))
			it.FieldName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortOrder":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortOrder"))
			it.SortOrder, err = ec.unmarshalNSortOrder2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐSortOrder(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserProfileInput(ctx context.Context, obj interface{}) (resources.UserProfileInput, error) {
	var it resources.UserProfileInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "photoUploadID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photoUploadID"))
			it.PhotoUploadID, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateOfBirth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfBirth"))
			it.DateOfBirth, err = ec.unmarshalODate2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalOGender2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) __Entity(ctx context.Context, sel ast.SelectionSet, obj fedruntime.Entity) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case base.PageInfo:
		return ec._PageInfo(ctx, sel, &obj)
	case *base.PageInfo:
		if obj == nil {
			return graphql.Null
		}
		return ec._PageInfo(ctx, sel, obj)
	case base.UserProfile:
		return ec._UserProfile(ctx, sel, &obj)
	case *base.UserProfile:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserProfile(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var beneficiaryImplementors = []string{"Beneficiary"}

func (ec *executionContext) _Beneficiary(ctx context.Context, sel ast.SelectionSet, obj *model.Beneficiary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, beneficiaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Beneficiary")
		case "name":
			out.Values[i] = ec._Beneficiary_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "msisdns":
			out.Values[i] = ec._Beneficiary_msisdns(ctx, field, obj)
		case "emails":
			out.Values[i] = ec._Beneficiary_emails(ctx, field, obj)
		case "relationship":
			out.Values[i] = ec._Beneficiary_relationship(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dateOfBirth":
			out.Values[i] = ec._Beneficiary_dateOfBirth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var bioDataImplementors = []string{"BioData"}

func (ec *executionContext) _BioData(ctx context.Context, sel ast.SelectionSet, obj *base.BioData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bioDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BioData")
		case "firstName":
			out.Values[i] = ec._BioData_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._BioData_lastName(ctx, field, obj)
		case "dateOfBirth":
			out.Values[i] = ec._BioData_dateOfBirth(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._BioData_gender(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var branchImplementors = []string{"Branch"}

func (ec *executionContext) _Branch(ctx context.Context, sel ast.SelectionSet, obj *domain.Branch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, branchImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Branch")
		case "id":
			out.Values[i] = ec._Branch_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Branch_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organizationSladeCode":
			out.Values[i] = ec._Branch_organizationSladeCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "branchSladeCode":
			out.Values[i] = ec._Branch_branchSladeCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var branchConnectionImplementors = []string{"BranchConnection"}

func (ec *executionContext) _BranchConnection(ctx context.Context, sel ast.SelectionSet, obj *resources.BranchConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, branchConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BranchConnection")
		case "edges":
			out.Values[i] = ec._BranchConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BranchConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var branchEdgeImplementors = []string{"BranchEdge"}

func (ec *executionContext) _BranchEdge(ctx context.Context, sel ast.SelectionSet, obj *resources.BranchEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, branchEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BranchEdge")
		case "cursor":
			out.Values[i] = ec._BranchEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._BranchEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessPartnerImplementors = []string{"BusinessPartner"}

func (ec *executionContext) _BusinessPartner(ctx context.Context, sel ast.SelectionSet, obj *domain.BusinessPartner) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessPartnerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessPartner")
		case "id":
			out.Values[i] = ec._BusinessPartner_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._BusinessPartner_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sladeCode":
			out.Values[i] = ec._BusinessPartner_sladeCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent":
			out.Values[i] = ec._BusinessPartner_parent(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessPartnerConnectionImplementors = []string{"BusinessPartnerConnection"}

func (ec *executionContext) _BusinessPartnerConnection(ctx context.Context, sel ast.SelectionSet, obj *resources.BusinessPartnerConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessPartnerConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessPartnerConnection")
		case "edges":
			out.Values[i] = ec._BusinessPartnerConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._BusinessPartnerConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessPartnerEdgeImplementors = []string{"BusinessPartnerEdge"}

func (ec *executionContext) _BusinessPartnerEdge(ctx context.Context, sel ast.SelectionSet, obj *resources.BusinessPartnerEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessPartnerEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessPartnerEdge")
		case "cursor":
			out.Values[i] = ec._BusinessPartnerEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._BusinessPartnerEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var coverImplementors = []string{"Cover"}

func (ec *executionContext) _Cover(ctx context.Context, sel ast.SelectionSet, obj *base.Cover) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, coverImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Cover")
		case "payerName":
			out.Values[i] = ec._Cover_payerName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payerSladeCode":
			out.Values[i] = ec._Cover_payerSladeCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "memberNumber":
			out.Values[i] = ec._Cover_memberNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "memberName":
			out.Values[i] = ec._Cover_memberName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var customerImplementors = []string{"Customer"}

func (ec *executionContext) _Customer(ctx context.Context, sel ast.SelectionSet, obj *domain.Customer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Customer")
		case "id":
			out.Values[i] = ec._Customer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "profileID":
			out.Values[i] = ec._Customer_profileID(ctx, field, obj)
		case "customerID":
			out.Values[i] = ec._Customer_customerID(ctx, field, obj)
		case "receivablesAccount":
			out.Values[i] = ec._Customer_receivablesAccount(ctx, field, obj)
		case "active":
			out.Values[i] = ec._Customer_active(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var entityImplementors = []string{"Entity"}

func (ec *executionContext) _Entity(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entityImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Entity",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Entity")
		case "findPageInfoByHasNextPage":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findPageInfoByHasNextPage(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findUserProfileByID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findUserProfileByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var identificationImplementors = []string{"Identification"}

func (ec *executionContext) _Identification(ctx context.Context, sel ast.SelectionSet, obj *domain.Identification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, identificationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Identification")
		case "identificationDocType":
			out.Values[i] = ec._Identification_identificationDocType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identificationDocNumber":
			out.Values[i] = ec._Identification_identificationDocNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identificationDocNumberUploadID":
			out.Values[i] = ec._Identification_identificationDocNumberUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var individualCoachImplementors = []string{"IndividualCoach"}

func (ec *executionContext) _IndividualCoach(ctx context.Context, sel ast.SelectionSet, obj *domain.IndividualCoach) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, individualCoachImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndividualCoach")
		case "identificationDoc":
			out.Values[i] = ec._IndividualCoach_identificationDoc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._IndividualCoach_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._IndividualCoach_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocumentsUploadID":
			out.Values[i] = ec._IndividualCoach_supportingDocumentsUploadID(ctx, field, obj)
		case "practiceLicenseID":
			out.Values[i] = ec._IndividualCoach_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._IndividualCoach_practiceLicenseUploadID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var individualNutritionImplementors = []string{"IndividualNutrition"}

func (ec *executionContext) _IndividualNutrition(ctx context.Context, sel ast.SelectionSet, obj *domain.IndividualNutrition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, individualNutritionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndividualNutrition")
		case "identificationDoc":
			out.Values[i] = ec._IndividualNutrition_identificationDoc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._IndividualNutrition_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._IndividualNutrition_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocumentsUploadID":
			out.Values[i] = ec._IndividualNutrition_supportingDocumentsUploadID(ctx, field, obj)
		case "practiceLicenseID":
			out.Values[i] = ec._IndividualNutrition_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._IndividualNutrition_practiceLicenseUploadID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var individualPharmaceuticalImplementors = []string{"IndividualPharmaceutical"}

func (ec *executionContext) _IndividualPharmaceutical(ctx context.Context, sel ast.SelectionSet, obj *domain.IndividualPharmaceutical) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, individualPharmaceuticalImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndividualPharmaceutical")
		case "identificationDoc":
			out.Values[i] = ec._IndividualPharmaceutical_identificationDoc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._IndividualPharmaceutical_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._IndividualPharmaceutical_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocumentsUploadID":
			out.Values[i] = ec._IndividualPharmaceutical_supportingDocumentsUploadID(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._IndividualPharmaceutical_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseID":
			out.Values[i] = ec._IndividualPharmaceutical_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._IndividualPharmaceutical_practiceLicenseUploadID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var individualPractitionerImplementors = []string{"IndividualPractitioner"}

func (ec *executionContext) _IndividualPractitioner(ctx context.Context, sel ast.SelectionSet, obj *domain.IndividualPractitioner) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, individualPractitionerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndividualPractitioner")
		case "identificationDoc":
			out.Values[i] = ec._IndividualPractitioner_identificationDoc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._IndividualPractitioner_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._IndividualPractitioner_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocumentsUploadID":
			out.Values[i] = ec._IndividualPractitioner_supportingDocumentsUploadID(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._IndividualPractitioner_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseID":
			out.Values[i] = ec._IndividualPractitioner_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._IndividualPractitioner_practiceLicenseUploadID(ctx, field, obj)
		case "practiceServices":
			out.Values[i] = ec._IndividualPractitioner_practiceServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cadre":
			out.Values[i] = ec._IndividualPractitioner_cadre(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var individualRiderImplementors = []string{"IndividualRider"}

func (ec *executionContext) _IndividualRider(ctx context.Context, sel ast.SelectionSet, obj *domain.IndividualRider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, individualRiderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndividualRider")
		case "identificationDoc":
			out.Values[i] = ec._IndividualRider_identificationDoc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._IndividualRider_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._IndividualRider_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "drivingLicenseID":
			out.Values[i] = ec._IndividualRider_drivingLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "drivingLicenseUploadID":
			out.Values[i] = ec._IndividualRider_drivingLicenseUploadID(ctx, field, obj)
		case "certificateGoodConductUploadID":
			out.Values[i] = ec._IndividualRider_certificateGoodConductUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocumentsUploadID":
			out.Values[i] = ec._IndividualRider_supportingDocumentsUploadID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kYCRequestImplementors = []string{"KYCRequest"}

func (ec *executionContext) _KYCRequest(ctx context.Context, sel ast.SelectionSet, obj *domain.KYCRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kYCRequestImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KYCRequest")
		case "id":
			out.Values[i] = ec._KYCRequest_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reqPartnerType":
			out.Values[i] = ec._KYCRequest_reqPartnerType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reqOrganizationType":
			out.Values[i] = ec._KYCRequest_reqOrganizationType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reqRaw":
			out.Values[i] = ec._KYCRequest_reqRaw(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "proceseed":
			out.Values[i] = ec._KYCRequest_proceseed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplierRecord":
			out.Values[i] = ec._KYCRequest_supplierRecord(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._KYCRequest_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var locationImplementors = []string{"Location"}

func (ec *executionContext) _Location(ctx context.Context, sel ast.SelectionSet, obj *domain.Location) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Location")
		case "id":
			out.Values[i] = ec._Location_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Location_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "branchSladeCode":
			out.Values[i] = ec._Location_branchSladeCode(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "updateUserProfile":
			out.Values[i] = ec._Mutation_updateUserProfile(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserPIN":
			out.Values[i] = ec._Mutation_updateUserPIN(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "registerPushToken":
			out.Values[i] = ec._Mutation_registerPushToken(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addPartnerType":
			out.Values[i] = ec._Mutation_addPartnerType(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suspendSupplier":
			out.Values[i] = ec._Mutation_suspendSupplier(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setUpSupplier":
			out.Values[i] = ec._Mutation_setUpSupplier(ctx, field)
		case "supplierEDILogin":
			out.Values[i] = ec._Mutation_supplierEDILogin(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplierSetDefaultLocation":
			out.Values[i] = ec._Mutation_supplierSetDefaultLocation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addIndividualRiderKYC":
			out.Values[i] = ec._Mutation_addIndividualRiderKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addOrganizationRiderKYC":
			out.Values[i] = ec._Mutation_addOrganizationRiderKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addIndividualPractitionerKYC":
			out.Values[i] = ec._Mutation_addIndividualPractitionerKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addOrganizationPractitionerKYC":
			out.Values[i] = ec._Mutation_addOrganizationPractitionerKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addOrganizationProviderKYC":
			out.Values[i] = ec._Mutation_addOrganizationProviderKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addIndividualPharmaceuticalKYC":
			out.Values[i] = ec._Mutation_addIndividualPharmaceuticalKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addOrganizationPharmaceuticalKYC":
			out.Values[i] = ec._Mutation_addOrganizationPharmaceuticalKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addIndividualCoachKYC":
			out.Values[i] = ec._Mutation_addIndividualCoachKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addOrganizationCoachKYC":
			out.Values[i] = ec._Mutation_addOrganizationCoachKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addIndividualNutritionKYC":
			out.Values[i] = ec._Mutation_addIndividualNutritionKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addOrganizationNutritionKYC":
			out.Values[i] = ec._Mutation_addOrganizationNutritionKYC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "processKYCRequest":
			out.Values[i] = ec._Mutation_processKYCRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recordPostVisitSurvey":
			out.Values[i] = ec._Mutation_recordPostVisitSurvey(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationCoachImplementors = []string{"OrganizationCoach"}

func (ec *executionContext) _OrganizationCoach(ctx context.Context, sel ast.SelectionSet, obj *domain.OrganizationCoach) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationCoachImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationCoach")
		case "organizationTypeName":
			out.Values[i] = ec._OrganizationCoach_organizationTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._OrganizationCoach_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._OrganizationCoach_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocumentsUploadID":
			out.Values[i] = ec._OrganizationCoach_supportingDocumentsUploadID(ctx, field, obj)
		case "certificateOfIncorporation":
			out.Values[i] = ec._OrganizationCoach_certificateOfIncorporation(ctx, field, obj)
		case "certificateOfInCorporationUploadID":
			out.Values[i] = ec._OrganizationCoach_certificateOfInCorporationUploadID(ctx, field, obj)
		case "directorIdentifications":
			out.Values[i] = ec._OrganizationCoach_directorIdentifications(ctx, field, obj)
		case "organizationCertificate":
			out.Values[i] = ec._OrganizationCoach_organizationCertificate(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._OrganizationCoach_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseID":
			out.Values[i] = ec._OrganizationCoach_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._OrganizationCoach_practiceLicenseUploadID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationNutritionImplementors = []string{"OrganizationNutrition"}

func (ec *executionContext) _OrganizationNutrition(ctx context.Context, sel ast.SelectionSet, obj *domain.OrganizationNutrition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationNutritionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationNutrition")
		case "organizationTypeName":
			out.Values[i] = ec._OrganizationNutrition_organizationTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._OrganizationNutrition_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._OrganizationNutrition_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocumentsUploadID":
			out.Values[i] = ec._OrganizationNutrition_supportingDocumentsUploadID(ctx, field, obj)
		case "certificateOfIncorporation":
			out.Values[i] = ec._OrganizationNutrition_certificateOfIncorporation(ctx, field, obj)
		case "certificateOfInCorporationUploadID":
			out.Values[i] = ec._OrganizationNutrition_certificateOfInCorporationUploadID(ctx, field, obj)
		case "directorIdentifications":
			out.Values[i] = ec._OrganizationNutrition_directorIdentifications(ctx, field, obj)
		case "organizationCertificate":
			out.Values[i] = ec._OrganizationNutrition_organizationCertificate(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._OrganizationNutrition_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseID":
			out.Values[i] = ec._OrganizationNutrition_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._OrganizationNutrition_practiceLicenseUploadID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationPharmaceuticalImplementors = []string{"OrganizationPharmaceutical"}

func (ec *executionContext) _OrganizationPharmaceutical(ctx context.Context, sel ast.SelectionSet, obj *domain.OrganizationPharmaceutical) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationPharmaceuticalImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationPharmaceutical")
		case "organizationTypeName":
			out.Values[i] = ec._OrganizationPharmaceutical_organizationTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._OrganizationPharmaceutical_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._OrganizationPharmaceutical_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocumentsUploadID":
			out.Values[i] = ec._OrganizationPharmaceutical_supportingDocumentsUploadID(ctx, field, obj)
		case "certificateOfIncorporation":
			out.Values[i] = ec._OrganizationPharmaceutical_certificateOfIncorporation(ctx, field, obj)
		case "certificateOfInCorporationUploadID":
			out.Values[i] = ec._OrganizationPharmaceutical_certificateOfInCorporationUploadID(ctx, field, obj)
		case "directorIdentifications":
			out.Values[i] = ec._OrganizationPharmaceutical_directorIdentifications(ctx, field, obj)
		case "organizationCertificate":
			out.Values[i] = ec._OrganizationPharmaceutical_organizationCertificate(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._OrganizationPharmaceutical_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseID":
			out.Values[i] = ec._OrganizationPharmaceutical_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._OrganizationPharmaceutical_practiceLicenseUploadID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationPractitionerImplementors = []string{"OrganizationPractitioner"}

func (ec *executionContext) _OrganizationPractitioner(ctx context.Context, sel ast.SelectionSet, obj *domain.OrganizationPractitioner) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationPractitionerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationPractitioner")
		case "organizationTypeName":
			out.Values[i] = ec._OrganizationPractitioner_organizationTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._OrganizationPractitioner_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._OrganizationPractitioner_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocumentsUploadID":
			out.Values[i] = ec._OrganizationPractitioner_supportingDocumentsUploadID(ctx, field, obj)
		case "certificateOfIncorporation":
			out.Values[i] = ec._OrganizationPractitioner_certificateOfIncorporation(ctx, field, obj)
		case "certificateOfInCorporationUploadID":
			out.Values[i] = ec._OrganizationPractitioner_certificateOfInCorporationUploadID(ctx, field, obj)
		case "directorIdentifications":
			out.Values[i] = ec._OrganizationPractitioner_directorIdentifications(ctx, field, obj)
		case "organizationCertificate":
			out.Values[i] = ec._OrganizationPractitioner_organizationCertificate(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._OrganizationPractitioner_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._OrganizationPractitioner_practiceLicenseUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceServices":
			out.Values[i] = ec._OrganizationPractitioner_practiceServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cadre":
			out.Values[i] = ec._OrganizationPractitioner_cadre(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationProviderImplementors = []string{"OrganizationProvider"}

func (ec *executionContext) _OrganizationProvider(ctx context.Context, sel ast.SelectionSet, obj *domain.OrganizationProvider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationProviderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationProvider")
		case "organizationTypeName":
			out.Values[i] = ec._OrganizationProvider_organizationTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPIN":
			out.Values[i] = ec._OrganizationProvider_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._OrganizationProvider_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocumentsUploadID":
			out.Values[i] = ec._OrganizationProvider_supportingDocumentsUploadID(ctx, field, obj)
		case "certificateOfIncorporation":
			out.Values[i] = ec._OrganizationProvider_certificateOfIncorporation(ctx, field, obj)
		case "certificateOfInCorporationUploadID":
			out.Values[i] = ec._OrganizationProvider_certificateOfInCorporationUploadID(ctx, field, obj)
		case "directorIdentifications":
			out.Values[i] = ec._OrganizationProvider_directorIdentifications(ctx, field, obj)
		case "organizationCertificate":
			out.Values[i] = ec._OrganizationProvider_organizationCertificate(ctx, field, obj)
		case "registrationNumber":
			out.Values[i] = ec._OrganizationProvider_registrationNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseID":
			out.Values[i] = ec._OrganizationProvider_practiceLicenseID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "practiceLicenseUploadID":
			out.Values[i] = ec._OrganizationProvider_practiceLicenseUploadID(ctx, field, obj)
		case "practiceServices":
			out.Values[i] = ec._OrganizationProvider_practiceServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cadre":
			out.Values[i] = ec._OrganizationProvider_cadre(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationRiderImplementors = []string{"OrganizationRider"}

func (ec *executionContext) _OrganizationRider(ctx context.Context, sel ast.SelectionSet, obj *domain.OrganizationRider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationRiderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationRider")
		case "organizationTypeName":
			out.Values[i] = ec._OrganizationRider_organizationTypeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "certificateOfIncorporation":
			out.Values[i] = ec._OrganizationRider_certificateOfIncorporation(ctx, field, obj)
		case "certificateOfInCorporationUploadID":
			out.Values[i] = ec._OrganizationRider_certificateOfInCorporationUploadID(ctx, field, obj)
		case "directorIdentifications":
			out.Values[i] = ec._OrganizationRider_directorIdentifications(ctx, field, obj)
		case "organizationCertificate":
			out.Values[i] = ec._OrganizationRider_organizationCertificate(ctx, field, obj)
		case "KRAPIN":
			out.Values[i] = ec._OrganizationRider_KRAPIN(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KRAPINUploadID":
			out.Values[i] = ec._OrganizationRider_KRAPINUploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportingDocumentsUploadID":
			out.Values[i] = ec._OrganizationRider_supportingDocumentsUploadID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pINOutputImplementors = []string{"PINOutput"}

func (ec *executionContext) _PINOutput(ctx context.Context, sel ast.SelectionSet, obj *resources.PINOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pINOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PINOutput")
		case "profileID":
			out.Values[i] = ec._PINOutput_profileID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pinNumber":
			out.Values[i] = ec._PINOutput_pinNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo", "_Entity"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *base.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var payablesAccountImplementors = []string{"PayablesAccount"}

func (ec *executionContext) _PayablesAccount(ctx context.Context, sel ast.SelectionSet, obj *domain.PayablesAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payablesAccountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PayablesAccount")
		case "id":
			out.Values[i] = ec._PayablesAccount_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._PayablesAccount_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isActive":
			out.Values[i] = ec._PayablesAccount_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "number":
			out.Values[i] = ec._PayablesAccount_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tag":
			out.Values[i] = ec._PayablesAccount_tag(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._PayablesAccount_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "userProfile":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userProfile(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "supplierProfile":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_supplierProfile(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findProvider":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findProvider(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findBranch":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findBranch(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fetchSupplierAllowedLocations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchSupplierAllowedLocations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fetchKYCProcessingRequests":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fetchKYCProcessingRequests(ctx, field)
				return res
			})
		case "_entities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__entities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "_service":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var receivablesAccountImplementors = []string{"ReceivablesAccount"}

func (ec *executionContext) _ReceivablesAccount(ctx context.Context, sel ast.SelectionSet, obj *domain.ReceivablesAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, receivablesAccountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReceivablesAccount")
		case "id":
			out.Values[i] = ec._ReceivablesAccount_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ReceivablesAccount_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isActive":
			out.Values[i] = ec._ReceivablesAccount_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "number":
			out.Values[i] = ec._ReceivablesAccount_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tag":
			out.Values[i] = ec._ReceivablesAccount_tag(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._ReceivablesAccount_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var servicesOfferedImplementors = []string{"ServicesOffered"}

func (ec *executionContext) _ServicesOffered(ctx context.Context, sel ast.SelectionSet, obj *model.ServicesOffered) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, servicesOfferedImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServicesOffered")
		case "services":
			out.Values[i] = ec._ServicesOffered_services(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "otherServices":
			out.Values[i] = ec._ServicesOffered_otherServices(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supplierImplementors = []string{"Supplier"}

func (ec *executionContext) _Supplier(ctx context.Context, sel ast.SelectionSet, obj *domain.Supplier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Supplier")
		case "id":
			out.Values[i] = ec._Supplier_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "profileID":
			out.Values[i] = ec._Supplier_profileID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplierId":
			out.Values[i] = ec._Supplier_supplierId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "payablesAccount":
			out.Values[i] = ec._Supplier_payablesAccount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplierKYC":
			out.Values[i] = ec._Supplier_supplierKYC(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":
			out.Values[i] = ec._Supplier_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accountType":
			out.Values[i] = ec._Supplier_accountType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "underOrganization":
			out.Values[i] = ec._Supplier_underOrganization(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isOrganizationVerified":
			out.Values[i] = ec._Supplier_isOrganizationVerified(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "partnerType":
			out.Values[i] = ec._Supplier_partnerType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "partnerSetupComplete":
			out.Values[i] = ec._Supplier_partnerSetupComplete(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "KYCSubmitted":
			out.Values[i] = ec._Supplier_KYCSubmitted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sladeCode":
			out.Values[i] = ec._Supplier_sladeCode(ctx, field, obj)
		case "parentOrganizationID":
			out.Values[i] = ec._Supplier_parentOrganizationID(ctx, field, obj)
		case "hasBranches":
			out.Values[i] = ec._Supplier_hasBranches(ctx, field, obj)
		case "location":
			out.Values[i] = ec._Supplier_location(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userProfileImplementors = []string{"UserProfile", "_Entity"}

func (ec *executionContext) _UserProfile(ctx context.Context, sel ast.SelectionSet, obj *base.UserProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userProfileImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserProfile")
		case "id":
			out.Values[i] = ec._UserProfile_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userName":
			out.Values[i] = ec._UserProfile_userName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verifiedIdentifiers":
			out.Values[i] = ec._UserProfile_verifiedIdentifiers(ctx, field, obj)
		case "PrimaryPhone":
			out.Values[i] = ec._UserProfile_PrimaryPhone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "PrimaryEmailAddress":
			out.Values[i] = ec._UserProfile_PrimaryEmailAddress(ctx, field, obj)
		case "SecondaryPhoneNumbers":
			out.Values[i] = ec._UserProfile_SecondaryPhoneNumbers(ctx, field, obj)
		case "SecondaryEmailAddresses":
			out.Values[i] = ec._UserProfile_SecondaryEmailAddresses(ctx, field, obj)
		case "pushTokens":
			out.Values[i] = ec._UserProfile_pushTokens(ctx, field, obj)
		case "permissions":
			out.Values[i] = ec._UserProfile_permissions(ctx, field, obj)
		case "termsAccepted":
			out.Values[i] = ec._UserProfile_termsAccepted(ctx, field, obj)
		case "suspended":
			out.Values[i] = ec._UserProfile_suspended(ctx, field, obj)
		case "photoUploadID":
			out.Values[i] = ec._UserProfile_photoUploadID(ctx, field, obj)
		case "covers":
			out.Values[i] = ec._UserProfile_covers(ctx, field, obj)
		case "userBioData":
			out.Values[i] = ec._UserProfile_userBioData(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var verifiedIdentifierImplementors = []string{"VerifiedIdentifier"}

func (ec *executionContext) _VerifiedIdentifier(ctx context.Context, sel ast.SelectionSet, obj *base.VerifiedIdentifier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, verifiedIdentifierImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VerifiedIdentifier")
		case "uid":
			out.Values[i] = ec._VerifiedIdentifier_uid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "timestamp":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._VerifiedIdentifier_timestamp(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "loginProvider":
			out.Values[i] = ec._VerifiedIdentifier_loginProvider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":
			out.Values[i] = ec.__Service_sdl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAccountType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐAccountType(ctx context.Context, v interface{}) (domain.AccountType, error) {
	var res domain.AccountType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAccountType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐAccountType(ctx context.Context, sel ast.SelectionSet, v domain.AccountType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBeneficiaryRelationship2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐBeneficiaryRelationship(ctx context.Context, v interface{}) (domain.BeneficiaryRelationship, error) {
	var res domain.BeneficiaryRelationship
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBeneficiaryRelationship2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐBeneficiaryRelationship(ctx context.Context, sel ast.SelectionSet, v domain.BeneficiaryRelationship) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNBranchConnection2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchConnection(ctx context.Context, sel ast.SelectionSet, v resources.BranchConnection) graphql.Marshaler {
	return ec._BranchConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNBranchConnection2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchConnection(ctx context.Context, sel ast.SelectionSet, v *resources.BranchConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BranchConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNBusinessPartnerConnection2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerConnection(ctx context.Context, sel ast.SelectionSet, v resources.BusinessPartnerConnection) graphql.Marshaler {
	return ec._BusinessPartnerConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNBusinessPartnerConnection2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerConnection(ctx context.Context, sel ast.SelectionSet, v *resources.BusinessPartnerConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BusinessPartnerConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDate2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐDate(ctx context.Context, v interface{}) (base.Date, error) {
	var res base.Date
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDate2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐDate(ctx context.Context, sel ast.SelectionSet, v base.Date) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDate2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐDate(ctx context.Context, v interface{}) (*base.Date, error) {
	var res = new(base.Date)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDate2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐDate(ctx context.Context, sel ast.SelectionSet, v *base.Date) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNFieldType2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐFieldType(ctx context.Context, v interface{}) (base.FieldType, error) {
	var res base.FieldType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFieldType2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐFieldType(ctx context.Context, sel ast.SelectionSet, v base.FieldType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNIdentification2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx context.Context, sel ast.SelectionSet, v domain.Identification) graphql.Marshaler {
	return ec._Identification(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNIdentificationDocType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentificationDocType(ctx context.Context, v interface{}) (domain.IdentificationDocType, error) {
	var res domain.IdentificationDocType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIdentificationDocType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentificationDocType(ctx context.Context, sel ast.SelectionSet, v domain.IdentificationDocType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNIdentificationInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx context.Context, v interface{}) (domain.Identification, error) {
	res, err := ec.unmarshalInputIdentificationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIndividualCoach2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualCoach(ctx context.Context, sel ast.SelectionSet, v domain.IndividualCoach) graphql.Marshaler {
	return ec._IndividualCoach(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndividualCoach2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualCoach(ctx context.Context, sel ast.SelectionSet, v *domain.IndividualCoach) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndividualCoach(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIndividualCoachInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualCoach(ctx context.Context, v interface{}) (domain.IndividualCoach, error) {
	res, err := ec.unmarshalInputIndividualCoachInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIndividualNutrition2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualNutrition(ctx context.Context, sel ast.SelectionSet, v domain.IndividualNutrition) graphql.Marshaler {
	return ec._IndividualNutrition(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndividualNutrition2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualNutrition(ctx context.Context, sel ast.SelectionSet, v *domain.IndividualNutrition) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndividualNutrition(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIndividualNutritionInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualNutrition(ctx context.Context, v interface{}) (domain.IndividualNutrition, error) {
	res, err := ec.unmarshalInputIndividualNutritionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIndividualPharmaceutical2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualPharmaceutical(ctx context.Context, sel ast.SelectionSet, v domain.IndividualPharmaceutical) graphql.Marshaler {
	return ec._IndividualPharmaceutical(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndividualPharmaceutical2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualPharmaceutical(ctx context.Context, sel ast.SelectionSet, v *domain.IndividualPharmaceutical) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndividualPharmaceutical(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIndividualPharmaceuticalInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualPharmaceutical(ctx context.Context, v interface{}) (domain.IndividualPharmaceutical, error) {
	res, err := ec.unmarshalInputIndividualPharmaceuticalInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIndividualPractitioner2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualPractitioner(ctx context.Context, sel ast.SelectionSet, v domain.IndividualPractitioner) graphql.Marshaler {
	return ec._IndividualPractitioner(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndividualPractitioner2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualPractitioner(ctx context.Context, sel ast.SelectionSet, v *domain.IndividualPractitioner) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndividualPractitioner(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIndividualPractitionerInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualPractitioner(ctx context.Context, v interface{}) (domain.IndividualPractitioner, error) {
	res, err := ec.unmarshalInputIndividualPractitionerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIndividualRider2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualRider(ctx context.Context, sel ast.SelectionSet, v domain.IndividualRider) graphql.Marshaler {
	return ec._IndividualRider(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndividualRider2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualRider(ctx context.Context, sel ast.SelectionSet, v *domain.IndividualRider) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._IndividualRider(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIndividualRiderInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIndividualRider(ctx context.Context, v interface{}) (domain.IndividualRider, error) {
	res, err := ec.unmarshalInputIndividualRiderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNKYCProcessStatus2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐKYCProcessStatus(ctx context.Context, v interface{}) (domain.KYCProcessStatus, error) {
	var res domain.KYCProcessStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNKYCProcessStatus2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐKYCProcessStatus(ctx context.Context, sel ast.SelectionSet, v domain.KYCProcessStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNKYCRequest2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐKYCRequest(ctx context.Context, sel ast.SelectionSet, v *domain.KYCRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._KYCRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLoginProviderType2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐLoginProviderType(ctx context.Context, v interface{}) (base.LoginProviderType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := base.LoginProviderType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLoginProviderType2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐLoginProviderType(ctx context.Context, sel ast.SelectionSet, v base.LoginProviderType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNOperation2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐOperation(ctx context.Context, v interface{}) (base.Operation, error) {
	var res base.Operation
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOperation2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐOperation(ctx context.Context, sel ast.SelectionSet, v base.Operation) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNOrganizationCoach2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationCoach(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationCoach) graphql.Marshaler {
	return ec._OrganizationCoach(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationCoach2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationCoach(ctx context.Context, sel ast.SelectionSet, v *domain.OrganizationCoach) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationCoach(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationCoachInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationCoach(ctx context.Context, v interface{}) (domain.OrganizationCoach, error) {
	res, err := ec.unmarshalInputOrganizationCoachInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationNutrition2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationNutrition(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationNutrition) graphql.Marshaler {
	return ec._OrganizationNutrition(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationNutrition2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationNutrition(ctx context.Context, sel ast.SelectionSet, v *domain.OrganizationNutrition) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationNutrition(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationNutritionInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationNutrition(ctx context.Context, v interface{}) (domain.OrganizationNutrition, error) {
	res, err := ec.unmarshalInputOrganizationNutritionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationPharmaceutical2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationPharmaceutical(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationPharmaceutical) graphql.Marshaler {
	return ec._OrganizationPharmaceutical(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationPharmaceutical2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationPharmaceutical(ctx context.Context, sel ast.SelectionSet, v *domain.OrganizationPharmaceutical) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationPharmaceutical(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationPharmaceuticalInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationPharmaceutical(ctx context.Context, v interface{}) (domain.OrganizationPharmaceutical, error) {
	res, err := ec.unmarshalInputOrganizationPharmaceuticalInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationPractitioner2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationPractitioner(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationPractitioner) graphql.Marshaler {
	return ec._OrganizationPractitioner(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationPractitioner2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationPractitioner(ctx context.Context, sel ast.SelectionSet, v *domain.OrganizationPractitioner) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationPractitioner(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationPractitionerInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationPractitioner(ctx context.Context, v interface{}) (domain.OrganizationPractitioner, error) {
	res, err := ec.unmarshalInputOrganizationPractitionerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationProvider2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationProvider(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationProvider) graphql.Marshaler {
	return ec._OrganizationProvider(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationProvider2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationProvider(ctx context.Context, sel ast.SelectionSet, v *domain.OrganizationProvider) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationProvider(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationProviderInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationProvider(ctx context.Context, v interface{}) (domain.OrganizationProvider, error) {
	res, err := ec.unmarshalInputOrganizationProviderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationRider2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationRider(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationRider) graphql.Marshaler {
	return ec._OrganizationRider(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationRider2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationRider(ctx context.Context, sel ast.SelectionSet, v *domain.OrganizationRider) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationRider(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationRiderInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationRider(ctx context.Context, v interface{}) (domain.OrganizationRider, error) {
	res, err := ec.unmarshalInputOrganizationRiderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx context.Context, v interface{}) (domain.OrganizationType, error) {
	var res domain.OrganizationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐOrganizationType(ctx context.Context, sel ast.SelectionSet, v domain.OrganizationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPINOutput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐPINOutput(ctx context.Context, sel ast.SelectionSet, v resources.PINOutput) graphql.Marshaler {
	return ec._PINOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNPINOutput2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐPINOutput(ctx context.Context, sel ast.SelectionSet, v *resources.PINOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PINOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNPageInfo2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v base.PageInfo) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPageInfo2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *base.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPartnerType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPartnerType(ctx context.Context, v interface{}) (domain.PartnerType, error) {
	var res domain.PartnerType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPartnerType2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPartnerType(ctx context.Context, sel ast.SelectionSet, v domain.PartnerType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPayablesAccount2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPayablesAccount(ctx context.Context, sel ast.SelectionSet, v *domain.PayablesAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PayablesAccount(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPermissionType2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPermissionType(ctx context.Context, v interface{}) (base.PermissionType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := base.PermissionType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPermissionType2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPermissionType(ctx context.Context, sel ast.SelectionSet, v base.PermissionType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPostVisitSurveyInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐPostVisitSurveyInput(ctx context.Context, v interface{}) (resources.PostVisitSurveyInput, error) {
	res, err := ec.unmarshalInputPostVisitSurveyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPractitionerCadre2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx context.Context, v interface{}) (domain.PractitionerCadre, error) {
	var res domain.PractitionerCadre
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPractitionerCadre2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerCadre(ctx context.Context, sel ast.SelectionSet, v domain.PractitionerCadre) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPractitionerService2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerService(ctx context.Context, v interface{}) (domain.PractitionerService, error) {
	var res domain.PractitionerService
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPractitionerService2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerService(ctx context.Context, sel ast.SelectionSet, v domain.PractitionerService) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPractitionerService2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx context.Context, v interface{}) ([]domain.PractitionerService, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]domain.PractitionerService, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPractitionerService2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerService(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNPractitionerService2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerServiceᚄ(ctx context.Context, sel ast.SelectionSet, v []domain.PractitionerService) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPractitionerService2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐPractitionerService(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNSortOrder2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐSortOrder(ctx context.Context, v interface{}) (base.SortOrder, error) {
	var res base.SortOrder
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSortOrder2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐSortOrder(ctx context.Context, sel ast.SelectionSet, v base.SortOrder) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNSupplier2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐSupplier(ctx context.Context, sel ast.SelectionSet, v domain.Supplier) graphql.Marshaler {
	return ec._Supplier(ctx, sel, &v)
}

func (ec *executionContext) marshalNSupplier2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐSupplier(ctx context.Context, sel ast.SelectionSet, v *domain.Supplier) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Supplier(ctx, sel, v)
}

func (ec *executionContext) marshalNUserProfile2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐUserProfile(ctx context.Context, sel ast.SelectionSet, v base.UserProfile) graphql.Marshaler {
	return ec._UserProfile(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserProfile2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐUserProfile(ctx context.Context, sel ast.SelectionSet, v *base.UserProfile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserProfile(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserProfileInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐUserProfileInput(ctx context.Context, v interface{}) (resources.UserProfileInput, error) {
	res, err := ec.unmarshalInputUserProfileInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalN_Any2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_Any2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_Any2ᚕmapᚄ(ctx context.Context, v interface{}) ([]map[string]interface{}, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]map[string]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_Any2map(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN_Any2ᚕmapᚄ(ctx context.Context, sel ast.SelectionSet, v []map[string]interface{}) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_Any2map(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v []fedruntime.Entity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOBioData2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐBioData(ctx context.Context, sel ast.SelectionSet, v base.BioData) graphql.Marshaler {
	return ec._BioData(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOBranch2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐBranch(ctx context.Context, sel ast.SelectionSet, v *domain.Branch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Branch(ctx, sel, v)
}

func (ec *executionContext) marshalOBranchEdge2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchEdge(ctx context.Context, sel ast.SelectionSet, v []*resources.BranchEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBranchEdge2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBranchEdge2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchEdge(ctx context.Context, sel ast.SelectionSet, v *resources.BranchEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BranchEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBranchFilterInput2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchFilterInput(ctx context.Context, v interface{}) ([]*resources.BranchFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*resources.BranchFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBranchFilterInput2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBranchFilterInput2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchFilterInput(ctx context.Context, v interface{}) (*resources.BranchFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBranchFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBranchSortInput2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchSortInput(ctx context.Context, v interface{}) ([]*resources.BranchSortInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*resources.BranchSortInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBranchSortInput2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchSortInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBranchSortInput2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBranchSortInput(ctx context.Context, v interface{}) (*resources.BranchSortInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBranchSortInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBusinessPartner2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐBusinessPartner(ctx context.Context, sel ast.SelectionSet, v *domain.BusinessPartner) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BusinessPartner(ctx, sel, v)
}

func (ec *executionContext) marshalOBusinessPartnerEdge2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerEdge(ctx context.Context, sel ast.SelectionSet, v []*resources.BusinessPartnerEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBusinessPartnerEdge2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBusinessPartnerEdge2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerEdge(ctx context.Context, sel ast.SelectionSet, v *resources.BusinessPartnerEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BusinessPartnerEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBusinessPartnerFilterInput2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerFilterInput(ctx context.Context, v interface{}) ([]*resources.BusinessPartnerFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*resources.BusinessPartnerFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBusinessPartnerFilterInput2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBusinessPartnerFilterInput2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerFilterInput(ctx context.Context, v interface{}) (*resources.BusinessPartnerFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBusinessPartnerFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBusinessPartnerSortInput2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerSortInput(ctx context.Context, v interface{}) ([]*resources.BusinessPartnerSortInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*resources.BusinessPartnerSortInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBusinessPartnerSortInput2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerSortInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBusinessPartnerSortInput2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋapplicationᚋresourcesᚐBusinessPartnerSortInput(ctx context.Context, v interface{}) (*resources.BusinessPartnerSortInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBusinessPartnerSortInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCover2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐCover(ctx context.Context, sel ast.SelectionSet, v base.Cover) graphql.Marshaler {
	return ec._Cover(ctx, sel, &v)
}

func (ec *executionContext) marshalOCover2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐCover(ctx context.Context, sel ast.SelectionSet, v []base.Cover) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCover2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐCover(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODate2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐDate(ctx context.Context, v interface{}) (*base.Date, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(base.Date)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODate2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐDate(ctx context.Context, sel ast.SelectionSet, v *base.Date) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFilterParam2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐFilterParam(ctx context.Context, v interface{}) ([]*base.FilterParam, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*base.FilterParam, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFilterParam2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐFilterParam(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFilterParam2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐFilterParam(ctx context.Context, v interface{}) (*base.FilterParam, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFilterParam(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGender2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐGender(ctx context.Context, v interface{}) (base.Gender, error) {
	var res base.Gender
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGender2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐGender(ctx context.Context, sel ast.SelectionSet, v base.Gender) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOGender2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐGender(ctx context.Context, v interface{}) (*base.Gender, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(base.Gender)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGender2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐGender(ctx context.Context, sel ast.SelectionSet, v *base.Gender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOIdentification2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx context.Context, sel ast.SelectionSet, v domain.Identification) graphql.Marshaler {
	return ec._Identification(ctx, sel, &v)
}

func (ec *executionContext) marshalOIdentification2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx context.Context, sel ast.SelectionSet, v []domain.Identification) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIdentification2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOIdentificationInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx context.Context, v interface{}) (domain.Identification, error) {
	res, err := ec.unmarshalInputIdentificationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOIdentificationInput2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx context.Context, v interface{}) ([]domain.Identification, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]domain.Identification, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOIdentificationInput2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐIdentification(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOKYCProcessStatus2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐKYCProcessStatus(ctx context.Context, v interface{}) (domain.KYCProcessStatus, error) {
	var res domain.KYCProcessStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOKYCProcessStatus2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐKYCProcessStatus(ctx context.Context, sel ast.SelectionSet, v domain.KYCProcessStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOKYCRequest2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐKYCRequestᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.KYCRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKYCRequest2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐKYCRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLocation2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐLocation(ctx context.Context, sel ast.SelectionSet, v *domain.Location) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Location(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPaginationInput2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPaginationInput(ctx context.Context, v interface{}) (*base.PaginationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaginationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPermissionType2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPermissionTypeᚄ(ctx context.Context, v interface{}) ([]base.PermissionType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]base.PermissionType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPermissionType2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPermissionType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPermissionType2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPermissionTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []base.PermissionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPermissionType2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐPermissionType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOReceivablesAccount2gitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐReceivablesAccount(ctx context.Context, sel ast.SelectionSet, v domain.ReceivablesAccount) graphql.Marshaler {
	return ec._ReceivablesAccount(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOSortOrder2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐSortOrder(ctx context.Context, v interface{}) (*base.SortOrder, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(base.SortOrder)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSortOrder2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐSortOrder(ctx context.Context, sel ast.SelectionSet, v *base.SortOrder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSortParam2ᚕᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐSortParam(ctx context.Context, v interface{}) ([]*base.SortParam, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*base.SortParam, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSortParam2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐSortParam(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSortParam2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐSortParam(ctx context.Context, v interface{}) (*base.SortParam, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSortParam(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOSupplier2ᚖgitlabᚗslade360emrᚗcomᚋgoᚋprofileᚋpkgᚋonboardingᚋdomainᚐSupplier(ctx context.Context, sel ast.SelectionSet, v *domain.Supplier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Supplier(ctx, sel, v)
}

func (ec *executionContext) marshalOVerifiedIdentifier2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐVerifiedIdentifier(ctx context.Context, sel ast.SelectionSet, v base.VerifiedIdentifier) graphql.Marshaler {
	return ec._VerifiedIdentifier(ctx, sel, &v)
}

func (ec *executionContext) marshalOVerifiedIdentifier2ᚕgitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐVerifiedIdentifier(ctx context.Context, sel ast.SelectionSet, v []base.VerifiedIdentifier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVerifiedIdentifier2gitlabᚗslade360emrᚗcomᚋgoᚋbaseᚐVerifiedIdentifier(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v fedruntime.Entity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__Entity(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
