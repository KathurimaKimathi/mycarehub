// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"gitlab.slade360emr.com/go/base"
	"gitlab.slade360emr.com/go/profile/pkg/onboarding/domain"
)

type Beneficiary struct {
	Name         string                         `json:"name"`
	Msisdns      []string                       `json:"msisdns"`
	Emails       []string                       `json:"emails"`
	Relationship domain.BeneficiaryRelationship `json:"relationship"`
	DateOfBirth  base.Date                      `json:"dateOfBirth"`
}

type BeneficiaryInput struct {
	Name         string                         `json:"name"`
	Msisdns      []string                       `json:"msisdns"`
	Emails       []string                       `json:"emails"`
	Relationship domain.BeneficiaryRelationship `json:"relationship"`
	DateOfBirth  base.Date                      `json:"dateOfBirth"`
}

type LocationInput struct {
	ID              string  `json:"id"`
	Name            string  `json:"name"`
	BranchSladeCode *string `json:"branchSladeCode"`
}

type OtherPractitionerServiceInput struct {
	OtherServices []string `json:"otherServices"`
}

type PractitionerServiceInput struct {
	Services []domain.PractitionerService `json:"services"`
}

type ReceivablesAccount struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	IsActive    bool   `json:"isActive"`
	Number      string `json:"number"`
	Tag         string `json:"tag"`
	Description string `json:"description"`
}

type ServicesOffered struct {
	Services      []domain.PractitionerService `json:"services"`
	OtherServices []string                     `json:"otherServices"`
}

type SignUpMethod string

const (
	SignUpMethodAnonymous SignUpMethod = "anonymous"
	SignUpMethodApple     SignUpMethod = "apple"
	SignUpMethodFacebook  SignUpMethod = "facebook"
	SignUpMethodGoogle    SignUpMethod = "google"
	SignUpMethodPhone     SignUpMethod = "phone"
)

var AllSignUpMethod = []SignUpMethod{
	SignUpMethodAnonymous,
	SignUpMethodApple,
	SignUpMethodFacebook,
	SignUpMethodGoogle,
	SignUpMethodPhone,
}

func (e SignUpMethod) IsValid() bool {
	switch e {
	case SignUpMethodAnonymous, SignUpMethodApple, SignUpMethodFacebook, SignUpMethodGoogle, SignUpMethodPhone:
		return true
	}
	return false
}

func (e SignUpMethod) String() string {
	return string(e)
}

func (e *SignUpMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SignUpMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SignUpMethod", str)
	}
	return nil
}

func (e SignUpMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
